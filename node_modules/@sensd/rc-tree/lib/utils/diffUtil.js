"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepCloneTree = deepCloneTree;
exports.findExpandedKeys = findExpandedKeys;
exports.getExpandRange = getExpandRange;
exports.lastTraversalTree = lastTraversalTree;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function findExpandedKeys() {
  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var prevLen = prev.length;
  var nextLen = next.length;

  if (Math.abs(prevLen - nextLen) !== 1) {
    return {
      add: false,
      key: null
    };
  }

  function find(shorter, longer) {
    var cache = new Map();
    shorter.forEach(function (key) {
      cache.set(key, true);
    });
    var keys = longer.filter(function (key) {
      return !cache.has(key);
    });
    return keys.length === 1 ? keys[0] : null;
  }

  if (prevLen < nextLen) {
    return {
      add: true,
      key: find(prev, next)
    };
  }

  return {
    add: false,
    key: find(next, prev)
  };
}

function getExpandRange(shorter, longer, key) {
  var shorterStartIndex = shorter.findIndex(function (data) {
    return data.key === key;
  });
  var shorterEndNode = shorter[shorterStartIndex + 1];
  var longerStartIndex = longer.findIndex(function (data) {
    return data.key === key;
  });

  if (shorterEndNode) {
    var longerEndIndex = longer.findIndex(function (data) {
      return data.key === shorterEndNode.key;
    });
    return longer.slice(longerStartIndex + 1, longerEndIndex);
  }

  return longer.slice(longerStartIndex + 1);
}

function deepCloneTree(origin) {
  var target = Array.isArray(origin) ? [] : {};

  for (var prop in origin) {
    if ((0, _typeof2.default)(origin[prop]) === 'object') {
      if (prop === 'children') {
        target.children = deepCloneTree(origin.children);
      }

      if (!isNaN(Number(prop))) {
        target[prop] = deepCloneTree(origin[prop]);
      }
    } else {
      if (origin.key) {
        target.key = origin.key;
      }

      target.disabled = origin.disabled || origin.disableCheckbox || false;
    }
  }

  return target;
}

function lastTraversalTree(fn, children) {
  if (!Array.isArray(children)) return [];
  return children.map(function (child) {
    if (child && Array.isArray(child.children)) {
      child.children = lastTraversalTree(fn, child.children);
    }

    return fn(child);
  }).filter(function (x) {
    return x !== null && x !== undefined;
  });
}