var _excluded = ["prefixCls", "style", "className", "rowGutter"],
    _excluded2 = ["icon"];

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import * as React from 'react';
import classNames from 'classnames';
import Animate from 'rc-animate';
import omit from 'omit.js';
import { Tooltip, Row, Col } from 'sensd';
import HelpOutlined from '@sensd/icons/HelpOutlined';
import ErrorFilled from '@sensd/icons/ErrorFilled';
import LoadingOutlined from '@sensd/icons/LoadingOutlined';
import CloseCircleFilled from '@sensd/icons/CloseCircleFilled';
import CheckCircleFilled from '@sensd/icons/CheckCircleFilled';
import ExclamationCircleFilled from '@sensd/icons/ExclamationCircleFilled';
import CompatibleConsumer from '../CompatibleConsumer';
import warning from '../_util/warning';
import { tuple } from '../_util/types'; // import { cloneElement } from '../_util/reactNode';

import { FIELD_META_PROP, FIELD_DATA_PROP } from './constants';
import FormContext from './context';
var ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');
var FormLabelAligns = tuple('left', 'right');

function toTooltipProps(tooltip) {
  if (!tooltip) {
    return null;
  }

  if (_typeof(tooltip) === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {
    return tooltip;
  }

  return {
    title: tooltip
  };
}

function intersperseSpace(list) {
  return list.reduce(function (current, item) {
    return [].concat(_toConsumableArray(current), [' ', item]);
  }, []).slice(1);
}

var FormItem = /*#__PURE__*/function (_React$Component) {
  _inherits(FormItem, _React$Component);

  var _super = _createSuper(FormItem);

  function FormItem() {
    var _this;

    _classCallCheck(this, FormItem);

    _this = _super.apply(this, arguments);
    _this.helpShow = false; // Resolve duplicated ids bug between different forms

    _this.onHelpAnimEnd = function (_key, helpShow) {
      _this.helpShow = helpShow;

      if (!helpShow) {
        _this.setState({});
      }
    };

    _this.renderFormItem = function (_ref) {
      var _itemClassName;

      var getPrefixCls = _ref.getPrefixCls;

      var _this$props = _this.props,
          customizePrefixCls = _this$props.prefixCls,
          style = _this$props.style,
          className = _this$props.className,
          rowGutter = _this$props.rowGutter,
          restProps = _objectWithoutProperties(_this$props, _excluded);

      var prefixCls = getPrefixCls('legacy-form', customizePrefixCls);

      var children = _this.renderChildren(prefixCls);

      var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, "".concat(prefixCls, "-item"), true), _defineProperty(_itemClassName, "".concat(prefixCls, "-item-with-help"), _this.helpShow), _defineProperty(_itemClassName, "".concat(className), !!className), _itemClassName);
      return /*#__PURE__*/React.createElement(FormContext.Consumer, {
        key: "label"
      }, function (_ref2) {
        var rowGutter = _ref2.rowGutter;
        return /*#__PURE__*/React.createElement(Row, Object.assign({
          className: classNames(itemClassName),
          style: style,
          gutter: rowGutter
        }, omit(restProps, ['id', // 'htmlFor',
        'label', 'labelAlign', 'labelCol', 'wrapperCol', 'help', 'extra', 'validateStatus', 'hasFeedback', 'required', 'colon', 'tooltip']), {
          key: "row"
        }), children);
      });
    };

    return _this;
  }

  _createClass(FormItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          help = _this$props2.help,
          validateStatus = _this$props2.validateStatus,
          id = _this$props2.id;
      warning(this.getControls(children, true).length <= 1 || help !== undefined || validateStatus !== undefined, 'Form.Item', 'Cannot generate `validateStatus` and `help` automatically, ' + 'while there are more than one `getFieldDecorator` in it.');
      warning(!id, 'Form.Item', '`id` is deprecated for its label `htmlFor`. Please use `htmlFor` directly.');
    }
  }, {
    key: "getHelpMessage",
    value: function getHelpMessage() {
      var help = this.props.help;
      var onlyControl = this.getOnlyControl();

      if (onlyControl) {
        var _this$getField = this.getField(),
            errors = _this$getField.errors;

        if (errors) {
          return intersperseSpace(errors.map(function (e, index) {
            var node = null;

            if ( /*#__PURE__*/React.isValidElement(e)) {
              node = e;
            } else if ( /*#__PURE__*/React.isValidElement(e.message)) {
              node = e.message;
            } // eslint-disable-next-line react/no-array-index-key


            return node ? /*#__PURE__*/React.cloneElement(node, {
              key: index
            }) : e.message;
          }));
        }

        return help;
      }

      return help;
    }
  }, {
    key: "getControls",
    value: function getControls(children, recursively) {
      var controls = [];
      var childrenArray = React.Children.toArray(children);

      for (var i = 0; i < childrenArray.length; i += 1) {
        if (!recursively && controls.length > 0) {
          break;
        }

        var child = childrenArray[i];

        if (child.type && (child.type === FormItem || child.type.displayName === 'FormItem')) {
          continue;
        }

        if (!child.props) {
          continue;
        }

        if (FIELD_META_PROP in child.props) {
          // And means FIELD_DATA_PROP in child.props, too.
          controls.push(child);
        } else if (child.props.children) {
          controls = controls.concat(this.getControls(child.props.children, recursively));
        }
      }

      return controls;
    }
  }, {
    key: "getOnlyControl",
    value: function getOnlyControl() {
      var child = this.getControls(this.props.children, false)[0];
      return child !== undefined ? child : null;
    }
  }, {
    key: "getChildProp",
    value: function getChildProp(prop) {
      var child = this.getOnlyControl();
      return child && child.props && child.props[prop];
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.getChildProp('id');
    }
  }, {
    key: "getMeta",
    value: function getMeta() {
      return this.getChildProp(FIELD_META_PROP);
    }
  }, {
    key: "getField",
    value: function getField() {
      return this.getChildProp(FIELD_DATA_PROP);
    }
  }, {
    key: "getValidateStatus",
    value: function getValidateStatus() {
      var onlyControl = this.getOnlyControl();

      if (!onlyControl) {
        return '';
      }

      var field = this.getField();

      if (field.validating) {
        return 'validating';
      }

      if (field.errors) {
        return 'error';
      }

      var fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;

      if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {
        return 'success';
      }

      return '';
    }
  }, {
    key: "isRequired",
    value: function isRequired() {
      var _this$props3 = this.props,
          required = _this$props3.required,
          optionalText = _this$props3.optionalText;

      if (optionalText) {
        return false;
      }

      if (required !== undefined) {
        return required;
      }

      if (this.getOnlyControl()) {
        var meta = this.getMeta() || {};
        var validate = meta.validate || [];
        return validate.filter(function (item) {
          return !!item.rules;
        }).some(function (item) {
          return item.rules.some(function (rule) {
            return rule.required;
          });
        });
      }

      return false;
    }
  }, {
    key: "renderHelp",
    value: function renderHelp(prefixCls) {
      var _this2 = this;

      var help = this.getHelpMessage();
      var props = this.props;
      var onlyControl = this.getOnlyControl;
      var validateStatus = props.validateStatus === undefined && onlyControl ? this.getValidateStatus() : props.validateStatus;

      if (help) {
        this.helpShow = !!help;
      }

      var propsHelp = props.help;
      return /*#__PURE__*/React.createElement(FormContext.Consumer, {
        key: "validate"
      }, function (_ref3) {
        var requireErrorIcon = _ref3.requireErrorIcon;
        var errorIcon = requireErrorIcon && validateStatus === 'error' && /*#__PURE__*/React.createElement(ErrorFilled, null);
        return /*#__PURE__*/React.createElement(Animate, {
          transitionName: "show-help",
          component: "",
          transitionAppear: true,
          key: "help",
          onEnd: _this2.onHelpAnimEnd
        }, help ? /*#__PURE__*/React.createElement("div", {
          className: "".concat(prefixCls, "-explain"),
          key: "help"
        }, errorIcon, help) : null);
      });
    }
  }, {
    key: "renderExtra",
    value: function renderExtra(prefixCls) {
      var extra = this.props.extra;
      return extra ? /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra) : null;
    }
  }, {
    key: "renderValidateWrapper",
    value: function renderValidateWrapper(prefixCls, c1, c2, c3) {
      var props = this.props;
      var onlyControl = this.getOnlyControl;
      var validateStatus = props.validateStatus === undefined && onlyControl ? this.getValidateStatus() : props.validateStatus;
      var classes = "".concat(prefixCls, "-item-control");

      if (validateStatus) {
        classes = classNames("".concat(prefixCls, "-item-control"), {
          'has-feedback': props.hasFeedback || validateStatus === 'validating',
          'has-success': validateStatus === 'success',
          'has-warning': validateStatus === 'warning',
          'has-error': validateStatus === 'error',
          'is-validating': validateStatus === 'validating'
        });
      }

      var iconType = null;

      switch (validateStatus) {
        case 'success':
          iconType = /*#__PURE__*/React.createElement(CheckCircleFilled, null);
          break;

        case 'warning':
          iconType = /*#__PURE__*/React.createElement(ExclamationCircleFilled, null);
          break;

        case 'error':
          iconType = /*#__PURE__*/React.createElement(CloseCircleFilled, null);
          break;

        case 'validating':
          iconType = /*#__PURE__*/React.createElement(LoadingOutlined, null);
          break;

        default:
          break;
      }

      var icon = props.hasFeedback && iconType ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-item-children-icon")
      }, iconType) : null;
      return /*#__PURE__*/React.createElement("div", {
        className: classes
      }, /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-item-children")
      }, c1, icon), c2, c3);
    }
  }, {
    key: "renderWrapper",
    value: function renderWrapper(prefixCls, children) {
      var _this3 = this;

      return /*#__PURE__*/React.createElement(FormContext.Consumer, {
        key: "wrapper"
      }, function (_ref4) {
        var contextWrapperCol = _ref4.wrapperCol,
            vertical = _ref4.vertical,
            requireErrorIcon = _ref4.requireErrorIcon;
        var wrapperCol = _this3.props.wrapperCol;
        var mergedWrapperCol = ('wrapperCol' in _this3.props ? wrapperCol : contextWrapperCol) || {};
        var className = classNames("".concat(prefixCls, "-item-control-wrapper"), mergedWrapperCol.className); // No pass FormContext since it's useless

        return /*#__PURE__*/React.createElement(FormContext.Provider, {
          value: {
            vertical: vertical,
            requireErrorIcon: requireErrorIcon
          }
        }, /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedWrapperCol, {
          className: className
        }), children));
      });
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(prefixCls) {
      var _this4 = this;

      return /*#__PURE__*/React.createElement(FormContext.Consumer, {
        key: "label"
      }, function (_ref5) {
        var vertical = _ref5.vertical,
            contextLabelAlign = _ref5.labelAlign,
            contextLabelCol = _ref5.labelCol,
            contextColon = _ref5.colon;
        var _this4$props = _this4.props,
            label = _this4$props.label,
            labelCol = _this4$props.labelCol,
            labelAlign = _this4$props.labelAlign,
            colon = _this4$props.colon,
            id = _this4$props.id,
            tooltip = _this4$props.tooltip,
            optionalText = _this4$props.optionalText;

        var required = _this4.isRequired();

        var mergedLabelCol = ('labelCol' in _this4.props ? labelCol : contextLabelCol) || {};
        var mergedLabelAlign = 'labelAlign' in _this4.props ? labelAlign : contextLabelAlign;
        var labelClsBasic = "".concat(prefixCls, "-item-label");
        var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && "".concat(labelClsBasic, "-left"), mergedLabelCol.className);
        var labelChildren = label; // Keep label is original where there should have no colon

        var computedColon = colon === true || contextColon !== false && colon !== false;
        var haveColon = computedColon && !vertical; // Remove duplicated user input colon

        if (haveColon && typeof label === 'string' && label.trim() !== '') {
          labelChildren = label.replace(/[：:]\s*$/, '');
        } // Tooltip


        var tooltipProps = toTooltipProps(tooltip);

        if (tooltipProps) {
          var _tooltipProps$icon = tooltipProps.icon,
              icon = _tooltipProps$icon === void 0 ? /*#__PURE__*/React.createElement(HelpOutlined, null) : _tooltipProps$icon,
              restTooltipProps = _objectWithoutProperties(tooltipProps, _excluded2);

          var tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {
            className: "".concat(prefixCls, "-item-tooltip"),
            title: ''
          }));
          labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);
        } // Add required mark if optional


        if (optionalText) {
          labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement("span", {
            className: "".concat(prefixCls, "-item-optional"),
            title: ""
          }, optionalText));
        }

        var labelClassName = classNames(_defineProperty({}, "".concat(prefixCls, "-item-required"), required));
        return label ? /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {
          className: labelColClassName
        }), /*#__PURE__*/React.createElement("label", {
          // htmlFor={htmlFor || id || this.getId()}
          className: labelClassName,
          title: typeof label === 'string' ? label : ''
        }, labelChildren)) : null;
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren(prefixCls) {
      var children = this.props.children;
      return [this.renderLabel(prefixCls), this.renderWrapper(prefixCls, this.renderValidateWrapper(prefixCls, children, this.renderHelp(prefixCls), this.renderExtra(prefixCls)))];
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(CompatibleConsumer, null, this.renderFormItem);
    }
  }]);

  return FormItem;
}(React.Component);

export { FormItem as default };
FormItem.defaultProps = {
  hasFeedback: false,
  optionalText: ''
};