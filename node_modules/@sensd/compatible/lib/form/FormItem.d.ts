import * as React from 'react';
import { TooltipProps } from 'sensd/lib/tooltip';
import { Breakpoint } from 'sensd/lib/_util/responsiveObserve';
import { ColProps } from 'sensd/lib/grid/col';
import { ConfigConsumerProps } from '../CompatibleConsumer';
declare const ValidateStatuses: ["success", "warning", "error", "validating", ""];
declare const FormLabelAligns: ["left", "right"];
export declare type FormLabelAlign = typeof FormLabelAligns[number];
export declare type WrapperTooltipProps = TooltipProps & {
    icon?: React.ReactElement;
};
export declare type LabelTooltipType = WrapperTooltipProps | React.ReactNode;
export declare type Gutter = number | Partial<Record<Breakpoint, number>>;
export interface FormItemProps {
    prefixCls?: string;
    className?: string;
    id?: string;
    label?: React.ReactNode;
    labelAlign?: FormLabelAlign;
    labelCol?: ColProps;
    wrapperCol?: ColProps;
    rowGutter?: Gutter | [Gutter, Gutter];
    help?: React.ReactNode;
    extra?: React.ReactNode;
    validateStatus?: typeof ValidateStatuses[number];
    hasFeedback?: boolean;
    required?: boolean;
    style?: React.CSSProperties;
    colon?: boolean;
    requireErrorIcon?: boolean;
    tooltip?: LabelTooltipType;
    optionalText?: string;
}
export default class FormItem extends React.Component<FormItemProps, any> {
    helpShow: boolean;
    static defaultProps: {
        hasFeedback: boolean;
        optionalText: string;
    };
    componentDidMount(): void;
    getHelpMessage(): {};
    getControls(children: React.ReactNode, recursively: boolean): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>[];
    getOnlyControl(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>;
    getChildProp(prop: string): any;
    getId(): any;
    getMeta(): any;
    getField(): any;
    getValidateStatus(): "error" | "" | "success" | "validating";
    onHelpAnimEnd: (_key: string, helpShow: boolean) => void;
    isRequired(): any;
    renderHelp(prefixCls: string): JSX.Element;
    renderExtra(prefixCls: string): JSX.Element;
    renderValidateWrapper(prefixCls: string, c1: React.ReactNode, c2: React.ReactNode, c3: React.ReactNode): JSX.Element;
    renderWrapper(prefixCls: string, children: React.ReactNode): JSX.Element;
    renderLabel(prefixCls: string): JSX.Element;
    renderChildren(prefixCls: string): JSX.Element[];
    renderFormItem: ({ getPrefixCls }: ConfigConsumerProps) => JSX.Element;
    render(): JSX.Element;
}
export {};
