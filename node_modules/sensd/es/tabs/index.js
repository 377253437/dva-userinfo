import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import RcTabs, { TabPane } from '@sensd/rc-tabs';
import classNames from 'classnames';
import AddOutlined from "@sensd/icons/es/icons/AddOutlined";
import CloseOutlined from "@sensd/icons/es/icons/CloseOutlined";
import toArray from "rc-util/es/Children/toArray";
import DownSelectFilled from "@sensd/icons/es/icons/DownFilled";
import devWarning from '../_util/devWarning';
import { ConfigContext } from '../config-provider';
import SizeContext from '../config-provider/SizeContext';
import Tooltip from '../tooltip';
import Typography from '../typography';
import LocaleReceiver from '../locale-provider/LocaleReceiver';

var getMoreIcon = function getMoreIcon(locale, prefixCls, type) {
  return function (dropdownVisible) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      title: dropdownVisible ? locale.collapseAll : locale.expandAll
    }, /*#__PURE__*/React.createElement("div", {
      className: classNames("".concat(prefixCls, "-more-icon"), _defineProperty({}, "".concat(prefixCls, "-edit-card-more-icon"), type === 'editable-card'))
    }, type !== 'editable-card' && /*#__PURE__*/React.createElement("span", null, locale.all), /*#__PURE__*/React.createElement(DownSelectFilled, {
      rotate: dropdownVisible ? 180 : 0
    })));
  };
};

function Tabs(_a) {
  var type = _a.type,
      className = _a.className,
      propSize = _a.size,
      _onEdit = _a.onEdit,
      hideAdd = _a.hideAdd,
      centered = _a.centered,
      addIcon = _a.addIcon,
      removeIcon = _a.removeIcon,
      _a$isSub = _a.isSub,
      isSub = _a$isSub === void 0 ? false : _a$isSub,
      _a$border = _a.border,
      border = _a$border === void 0 ? true : _a$border,
      maxTabWidth = _a.maxTabWidth,
      props = __rest(_a, ["type", "className", "size", "onEdit", "hideAdd", "centered", "addIcon", "removeIcon", "isSub", "border", "maxTabWidth"]);

  var customizePrefixCls = props.prefixCls,
      children = props.children;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('tabs', customizePrefixCls);

  var getEditable = function getEditable(locale) {
    var editable;

    if (type === 'editable-card') {
      editable = {
        onEdit: function onEdit(editType, _ref) {
          var key = _ref.key,
              event = _ref.event;
          _onEdit === null || _onEdit === void 0 ? void 0 : _onEdit(editType === 'add' ? event : key, editType);
        },
        removeIcon: removeIcon || /*#__PURE__*/React.createElement(Tooltip, {
          title: locale.deleteTab
        }, /*#__PURE__*/React.createElement(CloseOutlined, null)),
        addIcon: addIcon || /*#__PURE__*/React.createElement(Tooltip, {
          title: locale.addTab
        }, /*#__PURE__*/React.createElement(AddOutlined, null)),
        showAdd: hideAdd !== true
      };
    }

    return editable;
  };

  var rootPrefixCls = getPrefixCls();
  var onlyOneTab = toArray(children).length === 1; // 每种 tab 的最大宽度限制， 需要自定义renderTabBar实现， 如果已经实现renderTabBar不能覆盖

  if (typeof props.renderTabBar === 'undefined') {
    props.renderTabBar = function (tabBarProps, DefaultTabBar) {
      return /*#__PURE__*/React.createElement(DefaultTabBar, tabBarProps, function (node) {
        var newChildren = React.Children.map(node.props.children, function (child) {
          if (child) {
            var chs = child.props.children;
            return /*#__PURE__*/React.cloneElement(child, {}, /*#__PURE__*/React.createElement("div", {
              className: "".concat(prefixCls, "-tab-btn-text"),
              style: {
                maxWidth: maxTabWidth
              }
            }, typeof chs === 'string' ? /*#__PURE__*/React.createElement(Typography.Text, {
              className: "".concat(prefixCls, "-typography"),
              ellipsis: {
                tooltip: chs
              }
            }, chs) : chs));
          }
        });
        return React.cloneElement.apply(React, [node, {}].concat(_toConsumableArray(newChildren)));
      });
    };
  }

  var moreDropdownItemRenderWrapper = function moreDropdownItemRenderWrapper(node) {
    return /*#__PURE__*/React.createElement(Typography.Text, {
      className: classNames("".concat(prefixCls, "-typography"), _defineProperty({}, "".concat(prefixCls, "-typography-remove"), type === 'editable-card')),
      ellipsis: {
        tooltip: node
      }
    }, node);
  };

  devWarning(!('onPrevClick' in props) && !('onNextClick' in props), 'Tabs', '`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.');
  devWarning(!(type === 'capsule' && toArray(children).length > 5), 'Tabs', 'The children of Tabs cannot larger than 5.');
  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "Tabs"
  }, function (locale) {
    return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (contextSize) {
      var _classNames3;

      var size = propSize !== undefined ? propSize : contextSize;
      return /*#__PURE__*/React.createElement(RcTabs, _extends({
        direction: direction,
        moreTransitionName: "".concat(rootPrefixCls, "-slide-up"),
        moreIcon: getMoreIcon(locale, prefixCls, type),
        moreDropdownItemRenderWrapper: moreDropdownItemRenderWrapper,
        moreDropdownProps: {
          trigger: ['click'],
          overlayStyle: {
            width: '200px'
          }
        },
        boundaryOffset: 4
      }, props, {
        className: classNames((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames3, "".concat(prefixCls, "-card"), ['card', 'editable-card'].includes(type)), _defineProperty(_classNames3, "".concat(prefixCls, "-editable-card"), type === 'editable-card'), _defineProperty(_classNames3, "".concat(prefixCls, "-centered"), centered), _defineProperty(_classNames3, "".concat(prefixCls, "-capsule"), type === 'capsule'), _defineProperty(_classNames3, "".concat(prefixCls, "-sub"), (type === undefined || type === 'line') && isSub), _defineProperty(_classNames3, "".concat(prefixCls, "-card-border"), ['card', 'editable-card'].includes(type) && border), _defineProperty(_classNames3, "".concat(prefixCls, "-editable-card-onetab"), type === 'editable-card' && onlyOneTab), _classNames3), className),
        editable: getEditable(locale),
        prefixCls: prefixCls
      }));
    });
  });
}

Tabs.TabPane = TabPane;
export default Tabs;