import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import classNames from 'classnames';
import { ConfigContext } from '../config-provider';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale/default';
import { tuple } from '../_util/type';
export var PresetTagStatusTypes = tuple('success', 'processing', 'failed', 'abnormal', 'invalid');

var InternalStatusTag = function InternalStatusTag(props, ref) {
  var _classNames;

  var text = props.text,
      size = props.size,
      _props$status = props.status,
      status = _props$status === void 0 ? 'success' : _props$status,
      className = props.className,
      customizePrefixCls = props.prefixCls,
      restProps = __rest(props, ["text", "size", "status", "className", "prefixCls"]);

  var isPresetStatus = PresetTagStatusTypes.includes(status);

  var _status = isPresetStatus ? status : 'success';

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('status-tag', customizePrefixCls);
  var cls = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(_status), true), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames));
  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "Tag",
    defaultLocale: defaultLocale.Tag
  }, function (locale) {
    var key = "".concat(_status, "Text");
    return /*#__PURE__*/React.createElement("span", _extends({
      className: cls
    }, restProps, {
      ref: ref
    }), text || locale[key]);
  });
};

var StatusTag = /*#__PURE__*/React.forwardRef(InternalStatusTag);
export default StatusTag;