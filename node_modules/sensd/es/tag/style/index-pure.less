@import '../../style/themes/index';
@import '../../style/mixins/index';
@import '../../style/mixins/size';

@tag-default-bg: @background-01-transparent;
@status-tag-success-bg: @success-color;
@status-tag-processing-bg: @link-color;
@status-tag-failed-bg: @warning-color;
@status-tag-abnormal-bg: @info-color;
@status-tag-invalid-bg: @icon-color-transparent-disable;
@tag-border-radius: 3px;
@status-tag-small-font-color: @text-sub-color-transparent;

@tag-prefix-cls: ~'@{sens-prefix}-tag';

.@{tag-prefix-cls} {
  .reset-component();

  display: inline-flex;
  align-items: center;
  height: auto;
  margin-right: 4px;
  padding: 1px 8px;
  font-size: @font-size;
  line-height: @line-height;
  white-space: nowrap;
  background: @tag-default-bg;
  border-radius: @tag-border-radius;
  opacity: 1;
  transition: all 0.3s;

  &,
  a,
  a:hover {
    color: @font-color;
  }

  > a:first-child:last-child {
    display: inline-block;
    margin: 0 -8px;
    padding: 0 8px;
  }

  & > .@{sens-prefix}-typography {
    color: inherit;
  }

  & > &-close-icon {
    margin-left: 4px;
    color: @icon-color-transparent;
    cursor: pointer;
    transition: all 0.3s;

    &:hover,
    svg:hover {
      color: @warning-color;
    }

    &:hover,
    svg:active {
      color: @warning-color-active;
    }
  }

  &-small {
    padding: 1px 6px;
    font-size: 12px;
    line-height: 18px;

    .@{tag-prefix-cls}-close-icon {
      margin-left: 2px;
    }
  }

  &-has-color {
    border-color: transparent;
    &,
    a,
    a:hover,
    .@{iconfont-css-prefix}-close,
    .@{iconfont-css-prefix}-close:hover {
      color: @text-color-inverse;
    }
  }

  &-checkable {
    background-color: transparent;
    border-color: transparent;
    cursor: pointer;

    &:not(&-checked):hover {
      color: @primary-color;
    }

    &:active,
    &-checked {
      color: @text-color-inverse;
    }

    &-checked {
      background-color: @primary-6;
    }

    &:active {
      background-color: @primary-7;
    }
  }

  &-hidden {
    display: none;
  }

  &-disabled {
    color: @text-color-transparent-disable;
    cursor: not-allowed;

    .@{sens-prefix}-icon {
      color: @icon-color-transparent-disable;
      cursor: inherit;
    }

    &:hover {
      color: @text-color-transparent-disable-hover;

      .@{sens-prefix}-icon > svg {
        color: @icon-color-transparent-disable-hover;
      }
    }
  }

  .make-preset-color(@presetColor) {
    @bgColor: 'tag-@{presetColor}-background';
    &-@{presetColor} {
      background-color: @@bgColor;
    }
  }

  .make-preset-color(dawnRed);
  .make-preset-color(steppeYellow);
  .make-preset-color(auroraGreen);
  .make-preset-color(lakeBlue);
  .make-preset-color(icyBlue);
  .make-preset-color(orchidPurple);

  // mixin to iterate over colors and create CSS class for each one
  .make-color-classes(@i: length(@preset-colors)) when (@i > 0) {
    .make-color-classes(@i - 1);
    @color: extract(@preset-colors, @i);
    @lightColor: '@{color}-1';
    @lightBorderColor: '@{color}-3';
    @darkColor: '@{color}-6';
    @textColor: '@{color}-7';
    &-@{color} {
      color: @@textColor;
      background: @@lightColor;
      border-color: @@lightBorderColor;
    }
    &-@{color}-inverse {
      color: @text-color-inverse;
      background: @@darkColor;
      border-color: @@darkColor;
    }
  }

  .make-status-color-classes(@status, @cssVariableType) {
    @bgColor: '@{cssVariableType}-color-deprecated-bg';
    @borderColor: '@{cssVariableType}-color-deprecated-border';
    @textColor: '@{cssVariableType}-color';
    &-@{status} {
      color: @@textColor;
      background: @@bgColor;
      border-color: @@borderColor;
    }
  }

  .make-color-classes();

  .make-status-color-classes(success, success);
  .make-status-color-classes(processing, info);
  .make-status-color-classes(error, error);
  .make-status-color-classes(warning, warning);
}

@status-prefix-cls: ~'@{sens-prefix}-status-tag';

.@{status-prefix-cls} {
  position: relative;
  display: inline-flex;
  align-items: center;
  height: 22px;
  margin-right: 20px;
  padding-left: 16px;
  color: @text-color-transparent;
  line-height: 22px;

  &::before {
    position: absolute;
    left: 0;
    border-radius: 50%;
    content: '';
    .square(8px);
  }

  &-success {
    &::before {
      background-color: @status-tag-success-bg;
    }
  }

  &-processing {
    &::before {
      background-color: @status-tag-processing-bg;
    }

    &::after {
      position: absolute;
      left: 0;
      background-color: @status-tag-processing-bg;
      border-radius: 50%;
      animation: tag-processing-living 1.5s cubic-bezier(0.42, 0, 0.58, 1) infinite;
      content: '';
      .square(8px);
    }
  }

  &-failed {
    &::before {
      background-color: @status-tag-failed-bg;
    }
  }

  &-abnormal {
    &::before {
      background-color: @status-tag-abnormal-bg;
    }
  }

  &-invalid {
    &::before {
      background-color: @status-tag-invalid-bg;
    }
  }

  &-small {
    height: 22px;
    padding-left: 10px;
    color: @status-tag-small-font-color;
    line-height: 18px;

    &::before,
    &::after {
      .square(6px);
    }
  }
}

@group-prefix-cls: ~'@{sens-prefix}-tag-group';
@overflow-prefix-cls: ~'@{sens-prefix}-overflow';

.@{group-prefix-cls} {
  width: 100%;

  .@{overflow-prefix-cls} {
    display: flex;
    flex-wrap: wrap;
    width: 100%;

    .@{overflow-prefix-cls}-item-rest {
      .@{tag-prefix-cls} {
        padding: 0;
        background: none;
        cursor: default;

        &[sens-click-animating-without-extra-node='true'] {
          &::after {
            display: none;
          }
        }
      }
    }
  }
}

@keyframes tag-processing-living {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }

  100% {
    transform: scale(2);
    opacity: 0;
  }
}

@import './rtl';
