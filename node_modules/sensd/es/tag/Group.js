import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useCallback, useContext, useState } from 'react';
import Overflow from 'rc-overflow';
import classNames from 'classnames';
import findIndex from 'lodash/findIndex';
import { ConfigContext } from '../config-provider';
import Tooltip from '../tooltip';
import Tag from '.';
var RESPONSIVE = 'responsive';

function TagGroup(props, ref) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      children = props.children,
      labelKey = props.labelKey,
      renderRest = props.renderRest,
      _props$maxTagCount = props.maxTagCount,
      maxTagCount = _props$maxTagCount === void 0 ? 'responsive' : _props$maxTagCount,
      className = props.className,
      customizePrefixCls = props.prefixCls;

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      tagSize = _useState2[0],
      setTagSize = _useState2[1];

  var defaultRenderRest = function defaultRenderRest() {
    var labels = options;

    if (labelKey) {
      labels = options.map(function (el) {
        return el[labelKey];
      });
    }

    return /*#__PURE__*/React.createElement(Tooltip, {
      title: labels.join('„ÄÅ')
    }, /*#__PURE__*/React.createElement(Tag, {
      size: tagSize
    }, "...\u5171 ", options.length, " \u4E2A"));
  };

  var mergeRenderRest = renderRest || defaultRenderRest;

  var _renderItem = useCallback(function (item) {
    var index = findIndex(options, item);
    var itemNode = children === null || children === void 0 ? void 0 : children(item, index, options);

    if (!tagSize) {
      // Avoid: "Warning: Cannot update a component (`TagGroup`) while rendering a different component (`Item`)."
      setTimeout(function () {
        var _a; // @ts-ignore


        setTagSize(((_a = itemNode === null || itemNode === void 0 ? void 0 : itemNode.props) === null || _a === void 0 ? void 0 : _a.size) || 'default');
      }, 0);
    }

    return itemNode;
  }, [options]);

  var prefixCls = getPrefixCls('tag-group', customizePrefixCls);
  var cls = classNames(prefixCls, className);
  var overflowPrefixCls = getPrefixCls('overflow', customizePrefixCls);
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: cls
  }, /*#__PURE__*/React.createElement(Overflow, {
    prefixCls: overflowPrefixCls,
    data: options,
    maxCount: maxTagCount,
    renderItem: function renderItem(item) {
      return _renderItem(item);
    },
    renderRest: mergeRenderRest
  }));
}

var ForwardTagGroup = /*#__PURE__*/React.forwardRef(TagGroup);
ForwardTagGroup.displayName = 'TagGroup';
export default ForwardTagGroup;