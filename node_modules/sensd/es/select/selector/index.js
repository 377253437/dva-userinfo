import React from 'react';
import MultipleSelector from './MultipleSelector';
import SingleSelector from './SingleSelector';
import { ConfigContext } from '../../config-provider';
import LocaleReceiver from '../../locale-provider/LocaleReceiver';
import defaultLocale from '../../locale/default';
import Typography from '../../typography';

var Selector = function Selector(props) {
  var displayValue = props.displayValue,
      placeholder = props.placeholder,
      selectorSimpleMode = props.selectorSimpleMode,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      onClose = props.onClose,
      disabled = props.disabled;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select');
  var placeholderNode = /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "global",
    defaultLocale: defaultLocale.global
  }, function (locale) {
    var tips = placeholder || locale.placeholder;
    return /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-selection-placeholder")
    }, prefixIcon && /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-selector-prefix-icon")
    }, prefixIcon), /*#__PURE__*/React.createElement(Typography.Text, {
      ellipsis: {
        tooltip: tips
      },
      className: "".concat(prefixCls, "-ellipsis")
    }, tips));
  });

  if (!displayValue) {
    return placeholderNode;
  }

  if (Array.isArray(displayValue)) {
    if (displayValue.length === 0) return placeholderNode;
    return /*#__PURE__*/React.createElement(MultipleSelector, {
      selectorSimpleMode: selectorSimpleMode,
      displayValue: displayValue,
      onClose: onClose,
      disabled: disabled
    });
  }

  return /*#__PURE__*/React.createElement(SingleSelector, {
    prefixCls: prefixCls,
    prefixIcon: prefixIcon,
    suffixIcon: suffixIcon,
    displayValue: displayValue
  });
};

export default Selector;