import React from 'react';
import CloseOutlined from "@sensd/icons/es/icons/CloseOutlined";
import Tag from '../../tag';
import LocaleReceiver from '../../locale-provider/LocaleReceiver';
import defaultLocale from '../../locale/default';
import Tooltip from '../../tooltip';
import Typography from '../../typography';

var onPreventMouseDown = function onPreventMouseDown(event) {
  event.preventDefault();
  event.stopPropagation();
}; // @ts-ignore


var MultipleSelector = function MultipleSelector(props) {
  var selectorSimpleMode = props.selectorSimpleMode,
      displayValue = props.displayValue,
      _onClose = props.onClose,
      disabled = props.disabled;

  if (selectorSimpleMode) {
    return /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: "Select",
      defaultLocale: defaultLocale.Select
    }, function (locale) {
      return /*#__PURE__*/React.createElement(Tooltip, {
        title: displayValue === null || displayValue === void 0 ? void 0 : displayValue.map(function (item) {
          return item.label;
        }).join('„ÄÅ')
      }, /*#__PURE__*/React.createElement("div", null, locale.selectedCount.replace(/\${count}/, displayValue === null || displayValue === void 0 ? void 0 : displayValue.length)));
    });
  }

  if (!displayValue || displayValue.length === 0) return null;
  return displayValue === null || displayValue === void 0 ? void 0 : displayValue.map(function (item) {
    return /*#__PURE__*/React.createElement(Tag, {
      key: item.value,
      closable: item.closable !== false,
      onClose: function onClose() {
        return _onClose(item.value);
      },
      disabled: disabled || item.disabled,
      closeIcon: /*#__PURE__*/React.createElement(CloseOutlined, {
        onMouseDown: onPreventMouseDown
      })
    }, /*#__PURE__*/React.createElement(Typography.Text, {
      ellipsis: {
        tooltip: item.label
      }
    }, item.label));
  });
};

export default MultipleSelector;