import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

// TODO: 4.0 - codemod should help to change `filterOption` to support node props.
var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { useState, useEffect, useImperativeHandle, useRef } from 'react';
import omit from "rc-util/es/omit";
import classNames from 'classnames';
import RcSelect, { Option, OptGroup } from '@sensd/rc-select';
import useMergedState from "rc-util/es/hooks/useMergedState";
import { ConfigContext } from '../config-provider';
import getIcons from './utils/iconUtil';
import SizeContext from '../config-provider/SizeContext';
import { FormItemInputContext } from '../form/context';
import { getTransitionName } from '../_util/motion';
import { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';
import CustomerSelector from './CustomerSelector';
import CustomDropdown from './CustomDropdown';
import OptionContent from './option';
var SECRET_COMBOBOX_MODE_DO_NOT_USE = 'SECRET_COMBOBOX_MODE_DO_NOT_USE';

var InternalSelect = function InternalSelect(_a, ref) {
  var _classNames, _classNames2;

  var customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      className = _a.className,
      getPopupContainer = _a.getPopupContainer,
      dropdownClassName = _a.dropdownClassName,
      _a$listHeight = _a.listHeight,
      listHeight = _a$listHeight === void 0 ? 358 : _a$listHeight,
      _a$listItemHeight = _a.listItemHeight,
      listItemHeight = _a$listItemHeight === void 0 ? 34 : _a$listItemHeight,
      customizeSize = _a.size,
      notFoundContent = _a.notFoundContent,
      showCheckAll = _a.showCheckAll,
      selectorSimpleMode = _a.selectorSimpleMode,
      _a$groupType = _a.groupType,
      groupType = _a$groupType === void 0 ? 'box' : _a$groupType,
      statistics = _a.statistics,
      showConfirm = _a.showConfirm,
      dropdownRender = _a.dropdownRender,
      showDropdownSearch = _a.showDropdownSearch,
      dropdownSearchSuffix = _a.dropdownSearchSuffix,
      noDataDesc = _a.noDataDesc,
      noDataTitle = _a.noDataTitle,
      noResultDesc = _a.noResultDesc,
      noResultTitle = _a.noResultTitle,
      selectorRender = _a.selectorRender,
      propsSearchValue = _a.searchValue,
      dropdownSearchPlaceholder = _a.dropdownSearchPlaceholder,
      dropdownOptLeft = _a.dropdownOptLeft,
      selectAllText = _a.selectAllText,
      cancelText = _a.cancelText,
      okText = _a.okText,
      prefixIcon = _a.prefixIcon,
      onSearch = _a.onSearch,
      onCancel = _a.onCancel,
      onDropdownVisibleChange = _a.onDropdownVisibleChange,
      propsOpen = _a.open,
      propsDefaultOpen = _a.defaultOpen,
      customStatus = _a.status,
      _a$showArrow = _a.showArrow,
      showArrow = _a$showArrow === void 0 ? true : _a$showArrow,
      props = __rest(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "listHeight", "listItemHeight", "size", "notFoundContent", "showCheckAll", "selectorSimpleMode", "groupType", "statistics", "showConfirm", "dropdownRender", "showDropdownSearch", "dropdownSearchSuffix", "noDataDesc", "noDataTitle", "noResultDesc", "noResultTitle", "selectorRender", "searchValue", "dropdownSearchPlaceholder", "dropdownOptLeft", "selectAllText", "cancelText", "okText", "prefixIcon", "onSearch", "onCancel", "onDropdownVisibleChange", "open", "defaultOpen", "status", "showArrow"]);

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

  var size = React.useContext(SizeContext);
  var selectRef = useRef(null);
  var defaultValue = props.defaultValue,
      propsValue = props.value,
      onChange = props.onChange,
      disabled = props.disabled,
      optionLabelProp = props.optionLabelProp,
      labelInValue = props.labelInValue,
      placeholder = props.placeholder,
      tagRender = props.tagRender; // =========================== Query ===========================

  var _useMergedState = useMergedState(propsSearchValue, {
    value: propsSearchValue
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      searchValue = _useMergedState2[0],
      setSearchValue = _useMergedState2[1]; // =========================== Selector Value ===========================


  var _useMergedState3 = useMergedState(defaultValue, {
    value: propsValue
  }),
      _useMergedState4 = _slicedToArray(_useMergedState3, 2),
      selectorValue = _useMergedState4[0],
      setSelectorValue = _useMergedState4[1]; // =========================== Panel Value ===========================


  var _useState = useState(selectorValue),
      _useState2 = _slicedToArray(_useState, 2),
      panelValue = _useState2[0],
      setPanelValue = _useState2[1];

  useEffect(function () {
    setPanelValue(selectorValue);
  }, [selectorValue]);
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var rootPrefixCls = getPrefixCls();
  var mode = React.useMemo(function () {
    var m = props.mode;

    if (m === 'combobox') {
      return undefined;
    }

    if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
      return 'combobox';
    }

    return m;
  }, [props.mode]);
  var isMultiple = mode === 'multiple' || mode === 'tags';
  var mergedShowArrow = showArrow !== undefined ? showArrow : props.loading; // ===================== Form Status =====================

  var _React$useContext2 = React.useContext(FormItemInputContext),
      contextStatus = _React$useContext2.status,
      hasFeedback = _React$useContext2.hasFeedback,
      feedbackIcon = _React$useContext2.feedbackIcon;

  var mergedStatus = getMergedStatus(contextStatus, customStatus); // ===================== Empty =====================

  var mergedNotFound;

  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else if (mode === 'combobox') {
    mergedNotFound = null;
  }

  var _useState3 = useState(propsOpen || propsDefaultOpen),
      _useState4 = _slicedToArray(_useState3, 2),
      open = _useState4[0],
      setOpen = _useState4[1];

  useEffect(function () {
    setOpen(propsOpen);
  }, [propsOpen]); // ===================== Icons =====================

  var _getIcons = getIcons(_extends(_extends({}, props), {
    multiple: isMultiple,
    hasFeedback: hasFeedback,
    feedbackIcon: feedbackIcon,
    showArrow: mergedShowArrow,
    prefixCls: prefixCls,
    dropDownVisible: open
  })),
      suffixIcon = _getIcons.suffixIcon,
      itemIcon = _getIcons.itemIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon;

  var selectProps = omit(props, ['suffixIcon', 'itemIcon']);
  var rcSelectRtlDropDownClassName = classNames(dropdownClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-dropdown-").concat(direction), direction === 'rtl'), _defineProperty(_classNames, "".concat(prefixCls, "-dropdown-wrapper"), true), _classNames));
  var mergedSize = customizeSize || size;
  var mergedClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === 'large'), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === 'small'), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-simple"), selectorSimpleMode && isMultiple), _defineProperty(_classNames2, "".concat(prefixCls, "-tags"), mode === 'tags'), _defineProperty(_classNames2, "".concat(prefixCls, "-custom"), tagRender && !(panelValue === null || panelValue === void 0 ? void 0 : panelValue.length)), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);

  var handleChange = function handleChange(value, option) {
    setPanelValue(value);

    if (!showConfirm) {
      setSelectorValue(value);
      onChange === null || onChange === void 0 ? void 0 : onChange(value, option);
    }
  };

  var handleOk = function handleOk(value, option) {
    setPanelValue(value);
    setSelectorValue(value);
    onChange === null || onChange === void 0 ? void 0 : onChange(value, option); // 外部有 open 控制，采用外部的

    if (propsOpen === undefined) {
      setOpen(false);
    } else {
      onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(false);
    }
  };

  var handleCancel = function handleCancel() {
    // 外部有 open 控制，采用外部的
    if (propsOpen === undefined) {
      setOpen(false);
    } else {
      onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(false);
    }

    onCancel === null || onCancel === void 0 ? void 0 : onCancel();
  };

  var handleClose = function handleClose(value, option) {
    if (Array.isArray(selectorValue) && Array.isArray(panelValue)) {
      var changedValues = selectorValue.filter(function (val) {
        return val !== value;
      });
      setSelectorValue(changedValues);
      setPanelValue(panelValue.filter(function (val) {
        return val !== value;
      }));
      onChange === null || onChange === void 0 ? void 0 : onChange(changedValues, option);
    }
  };

  var customerSelector = function customerSelector(selectorProps) {
    return /*#__PURE__*/React.createElement(CustomerSelector, _extends({}, selectorProps, {
      value: selectorValue,
      selectorSimpleMode: selectorSimpleMode,
      onClose: handleClose,
      disabled: disabled,
      optionLabelProp: optionLabelProp,
      labelInValue: labelInValue,
      prefixIcon: prefixIcon,
      placeholder: placeholder
    }));
  };

  var handleSearch = function handleSearch(value) {
    setSearchValue(value);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value);
  };

  var optionRender = function optionRender(menu, selectContext) {
    var dropdownElement = /*#__PURE__*/React.createElement(CustomDropdown, _extends({
      menu: menu
    }, selectContext, {
      multiple: isMultiple,
      noDataDesc: noDataDesc,
      noDataTitle: noDataTitle,
      noResultDesc: noResultDesc,
      noResultTitle: noResultTitle,
      prefixCls: prefixCls,
      onSearch: handleSearch,
      searchValue: searchValue,
      onOK: handleOk,
      showCheckAll: showCheckAll,
      onCheckAll: setPanelValue,
      onCancel: handleCancel,
      statistics: statistics,
      showSearch: showDropdownSearch,
      searchSuffix: dropdownSearchSuffix,
      showConfirm: showConfirm,
      notFoundContent: mergedNotFound,
      dropdownSearchPlaceholder: dropdownSearchPlaceholder,
      customLeftOpt: dropdownOptLeft,
      selectAllText: selectAllText,
      cancelText: cancelText,
      okText: okText
    }));
    return (dropdownRender === null || dropdownRender === void 0 ? void 0 : dropdownRender(dropdownElement)) || dropdownElement;
  };

  var renderOption = function renderOption(data) {
    var checked = false;

    if (isMultiple && Array.isArray(panelValue)) {
      if (labelInValue) {
        checked = panelValue === null || panelValue === void 0 ? void 0 : panelValue.find(function (item) {
          return item.value === data.value;
        });
      } else {
        checked = panelValue === null || panelValue === void 0 ? void 0 : panelValue.includes(data.value);
      }
    }

    return /*#__PURE__*/React.createElement(OptionContent, _extends({
      key: data.value || data.label
    }, data, {
      checked: checked,
      multiple: isMultiple,
      searchValue: searchValue
    }));
  };

  useImperativeHandle(ref, function () {
    return _extends({
      toggleOpen: setOpen
    }, selectRef.current);
  });

  var handleVisibleChange = function handleVisibleChange(visible) {
    // 如果外部传入了 open，则内部不控制
    if (propsOpen === undefined) {
      setOpen(visible);
    }

    if (visible) {
      setTimeout(function () {
        var _a;

        (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.scrollTo(0);
      }, 50); // 每次打开下拉菜单时，重置面板选中数据

      setPanelValue(selectorValue);
    }

    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(visible);
  };

  return /*#__PURE__*/React.createElement(RcSelect, _extends({
    ref: selectRef,
    customerSelector: customerSelector,
    optionRender: optionRender // dropdown
    ,
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth,
    showArrow: true
  }, selectProps, {
    open: open,
    value: panelValue,
    onChange: handleChange,
    searchValue: searchValue,
    customOption: renderOption,
    transitionName: getTransitionName(rootPrefixCls, 'slide-up', props.transitionName),
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    mode: mode,
    prefixCls: prefixCls,
    direction: direction,
    inputIcon: suffixIcon,
    menuItemSelectedIcon: itemIcon,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    className: mergedClassName,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    dropdownClassName: rcSelectRtlDropDownClassName,
    dropdownAutoClose: showConfirm,
    groupType: groupType,
    getRawInputElement: selectorRender,
    onDropdownVisibleChange: handleVisibleChange
  }));
};

var Select = /*#__PURE__*/React.forwardRef(InternalSelect);
Select.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
Select.Option = Option;
Select.OptGroup = OptGroup;
export default Select;