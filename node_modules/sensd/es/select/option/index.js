import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import classNames from 'classnames';
import React from 'react';
import Checkbox from '../../checkbox';
import { ConfigContext } from '../../config-provider';
import Typography from '../../typography';
import searchByKeywords from '../../select-panel/utils/searchWords';

var Option = function Option(props) {
  var _classNames, _classNames2, _classNames3;

  var prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      multiple = props.multiple,
      disabled = props.disabled,
      checked = props.checked,
      optionTitle = props.optionTitle,
      content = props.content,
      detail = props.detail,
      _props$searchValue = props.searchValue,
      searchValue = _props$searchValue === void 0 ? '' : _props$searchValue;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select-option');
  return /*#__PURE__*/React.createElement("div", {
    className: classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-wrapper"), true), _defineProperty(_classNames, "".concat(prefixCls, "-single"), !multiple), _classNames))
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-content"), true), _defineProperty(_classNames2, "".concat(prefixCls, "-has-suffix"), suffixIcon), _defineProperty(_classNames2, "".concat(prefixCls, "-no-suffix"), !suffixIcon && !multiple), _classNames2))
  }, (prefixIcon || multiple) && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-prefix-icon")
  }, multiple && /*#__PURE__*/React.createElement(Checkbox, {
    disabled: disabled,
    checked: checked
  }) || prefixIcon), /*#__PURE__*/React.createElement("div", {
    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-text"), true), _defineProperty(_classNames3, "".concat(prefixCls, "-has-prefix"), prefixIcon || multiple), _classNames3))
  }, /*#__PURE__*/React.createElement(Typography.Text, {
    ellipsis: {
      tooltip: optionTitle
    },
    className: "".concat(prefixCls, "-ellipsis")
  }, typeof content === 'string' ? searchByKeywords(content, searchValue, prefixCls) : content), detail && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-detail")
  }, /*#__PURE__*/React.createElement(Typography.Text, {
    ellipsis: {
      tooltip: true
    },
    className: "".concat(prefixCls, "-ellipsis")
  }, detail)))), suffixIcon && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-suffix-icon")
  }, suffixIcon));
};

export default Option;