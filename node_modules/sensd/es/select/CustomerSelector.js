import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import Selector from './selector';

var CustomerSelector = function CustomerSelector(props) {
  var value = props.value,
      onClose = props.onClose,
      optionLabelProp = props.optionLabelProp,
      labelInValue = props.labelInValue,
      valueOptions = props.valueOptions,
      fieldNames = props.fieldNames,
      rawValues = props.rawValues,
      prefixIcon = props.prefixIcon,
      reset = __rest(props, ["value", "onClose", "optionLabelProp", "labelInValue", "valueOptions", "fieldNames", "rawValues", "prefixIcon"]);

  var multiple = Array.isArray(value);

  var getDisplayValue = function getDisplayValue(key) {
    var option = valueOptions.get(key);
    return _extends(_extends({}, option), {
      label: (option === null || option === void 0 ? void 0 : option[optionLabelProp || (fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.label)]) || key
    });
  };

  var getValues = function getValues() {
    var _a;

    if (value || value === 0) {
      return multiple ? value.map(function (item) {
        var _a;

        return getDisplayValue(labelInValue ? (_a = item) === null || _a === void 0 ? void 0 : _a.value : item);
      }) : getDisplayValue(labelInValue ? (_a = value) === null || _a === void 0 ? void 0 : _a.value : value);
    }
  };

  var singleOption = !multiple ? valueOptions.get(value) : undefined;

  var handleClose = function handleClose(val) {
    var pervValues = _toConsumableArray(rawValues);

    var values = pervValues.filter(function (pervValue) {
      return pervValue !== val;
    });
    onClose(val, values.map(function (item) {
      return valueOptions.get(item);
    }));
  };

  return /*#__PURE__*/React.createElement(Selector, _extends({
    displayValue: getValues(),
    prefixIcon: prefixIcon || (singleOption === null || singleOption === void 0 ? void 0 : singleOption.prefixIcon),
    suffixIcon: singleOption === null || singleOption === void 0 ? void 0 : singleOption.suffixIcon,
    onClose: handleClose
  }, reset));
};

export default CustomerSelector;