import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import React from 'react';
import Typography from '../typography';
var SPLIT = ' / ';
export var joinNode = function joinNode(nodeList) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SPLIT;

  if (nodeList.every(function (node) {
    return ['string', 'number'].includes(_typeof(node));
  })) {
    return nodeList.join(split);
  }

  var mergedNodeList = nodeList.reduce(function (list, label, index) {
    var keyedLabel = /*#__PURE__*/React.isValidElement(label) ?
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React.cloneElement(label, {
      key: index
    }) : label;

    if (index === 0) {
      return [keyedLabel];
    }

    return [].concat(_toConsumableArray(list), [SPLIT, keyedLabel]);
  }, []);
  return mergedNodeList;
};
export var wrapChildrenByTypography = function wrapChildrenByTypography(children, props) {
  var wrap = function wrap(content) {
    return /*#__PURE__*/React.createElement(Typography.Text, {
      className: props === null || props === void 0 ? void 0 : props.className,
      ellipsis: {
        tooltip: true
      }
    }, content);
  };

  var wrapEnable = function wrapEnable(content) {
    return ['string', 'number'].includes(_typeof(content));
  };

  if (wrapEnable(children)) {
    return wrap(children);
  }

  if (Array.isArray(children) && children.every(function (child) {
    return wrapEnable(child);
  })) {
    return wrap(children.join(''));
  }

  return children;
};
export default {
  joinNode: joinNode
};