import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { useRef, useState } from 'react';
import classNames from 'classnames';
import RcCascader from 'rc-cascader';
import omit from "rc-util/es/omit";
import RightFilled from "@sensd/icons/es/icons/RightFilled";
import LoadingOutlined from "@sensd/icons/es/icons/LoadingOutlined";
import LeftFilled from "@sensd/icons/es/icons/LeftFilled";
import devWarning from '../_util/devWarning';
import { ConfigContext } from '../config-provider';
import SizeContext from '../config-provider/SizeContext';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale/default';
import getIcons from '../select/utils/iconUtil';
import { getTransitionName } from '../_util/motion';
import Typography from '../typography';
import Tooltip from '../tooltip';
import Empty, { EmptyType } from '../select-panel/Empty';
import { joinNode, wrapChildrenByTypography } from './utils';
import { FormItemInputContext } from '../form/context';
import { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';

function highlightKeyword(str, lowerKeyword, prefixCls) {
  var cells = str.toLowerCase().split(lowerKeyword).reduce(function (list, cur, index) {
    return index === 0 ? [cur] : [].concat(_toConsumableArray(list), [lowerKeyword, cur]);
  }, []);
  var fillCells = [];
  var start = 0;
  cells.forEach(function (cell, index) {
    var end = start + cell.length;
    var originWorld = str.slice(start, end);
    start = end;

    if (index % 2 === 1) {
      originWorld = /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-menu-item-keyword"),
        key: "seperator"
      }, originWorld);
    }

    fillCells.push(originWorld);
  });
  return fillCells;
}

var defaultSearchRender = function defaultSearchRender(inputValue, path, prefixCls, fieldNames) {
  var optionList = []; // We do lower here to save perf

  var lower = inputValue.toLowerCase();
  path.forEach(function (node, index) {
    if (index !== 0) {
      optionList.push(' / ');
    }

    var label = node[fieldNames.label];

    var type = _typeof(label);

    if (type === 'string' || type === 'number') {
      label = highlightKeyword(String(label), lower, prefixCls);
    }

    optionList.push(label);
  });
  return optionList;
};

var Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames2;

  var customizePrefixCls = props.prefixCls,
      customizeSize = props.size,
      className = props.className,
      multiple = props.multiple,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      transitionName = props.transitionName,
      _props$choiceTransiti = props.choiceTransitionName,
      choiceTransitionName = _props$choiceTransiti === void 0 ? '' : _props$choiceTransiti,
      popupClassName = props.popupClassName,
      dropdownClassName = props.dropdownClassName,
      expandIcon = props.expandIcon,
      showSearch = props.showSearch,
      _props$allowClear = props.allowClear,
      allowClear = _props$allowClear === void 0 ? true : _props$allowClear,
      notFoundContent = props.notFoundContent,
      direction = props.direction,
      getPopupContainer = props.getPopupContainer,
      children = props.children,
      _props$displayRender = props.displayRender,
      displayRender = _props$displayRender === void 0 ? null : _props$displayRender,
      _props$maxTagPlacehol = props.maxTagPlaceholder,
      maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? null : _props$maxTagPlacehol,
      options = props.options,
      onChange = props.onChange,
      fieldNames = props.fieldNames,
      customStatus = props.status,
      rest = __rest(props, ["prefixCls", "size", "className", "multiple", "bordered", "transitionName", "choiceTransitionName", "popupClassName", "dropdownClassName", "expandIcon", "showSearch", "allowClear", "notFoundContent", "direction", "getPopupContainer", "children", "displayRender", "maxTagPlaceholder", "options", "onChange", "fieldNames", "status"]);

  var restProps = omit(rest, ['suffixIcon']);

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      rootDirection = _React$useContext.direction;

  var mergedDirection = direction || rootDirection;
  var isRtl = mergedDirection === 'rtl';

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      dropDownVisible = _useState2[0],
      setDropDownVisible = _useState2[1];

  var selectOptionRef = useRef([]);

  var getSelectOptionText = function getSelectOptionText(_ref) {
    var selectOption = _ref.selectOption;

    var _a;

    var labelKey = (fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.label) || 'label';
    var label = selectOption[labelKey]; // 如果 option 有 detail 则 label 为数组: `[label,detail]`

    var labelNode = Array.isArray(label) ? label[0] : label;

    if (labelNode && (labelNode === null || labelNode === void 0 ? void 0 : labelNode.type) === Typography.Text) {
      return (_a = labelNode.props) === null || _a === void 0 ? void 0 : _a.children;
    }

    return labelNode;
  }; // =================== Form =====================


  var _React$useContext2 = React.useContext(FormItemInputContext),
      contextStatus = _React$useContext2.status,
      hasFeedback = _React$useContext2.hasFeedback,
      feedbackIcon = _React$useContext2.feedbackIcon;

  var mergedStatus = getMergedStatus(contextStatus, customStatus); // =================== Warning =====================

  if (process.env.NODE_ENV !== 'production') {
    devWarning(popupClassName === undefined, 'Cascader', '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');
    devWarning(!multiple || !props.displayRender, 'Cascader', '`displayRender` not work on `multiple`. Please use `tagRender` instead.');
  } // =================== No Found ====================


  var mergedNotFoundContent = notFoundContent || /*#__PURE__*/React.createElement(Empty, {
    type: EmptyType.noData
  }); // ==================== Prefix =====================

  var rootPrefixCls = getPrefixCls();
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var cascaderPrefixCls = getPrefixCls('cascader', customizePrefixCls); // =================== Dropdown ====================

  var mergedDropdownClassName = classNames(dropdownClassName || popupClassName, "".concat(cascaderPrefixCls, "-dropdown"), _defineProperty({}, "".concat(cascaderPrefixCls, "-dropdown-rtl"), mergedDirection === 'rtl')); // ==================== Search =====================

  var mergedShowSearch = React.useMemo(function () {
    if (!showSearch) {
      return showSearch;
    }

    var searchConfig = {
      render: defaultSearchRender
    };

    if (_typeof(showSearch) === 'object') {
      searchConfig = _extends(_extends({}, searchConfig), showSearch);
    }

    return searchConfig;
  }, [showSearch]); // =============== Display Render =================

  var defaultDisplayRender = function defaultDisplayRender(label, selectOption) {
    // fix: value 未匹配到 options 中值
    if (selectOption.every(function (option) {
      return !option;
    })) {
      return joinNode(label);
    }

    if (!multiple) {
      var optionTextList = selectOption.map(function (option) {
        return getSelectOptionText({
          selectOption: option
        });
      });
      var mergedLabel = joinNode(optionTextList);
      return wrapChildrenByTypography(mergedLabel);
    } // 多选


    return wrapChildrenByTypography(getSelectOptionText({
      selectOption: selectOption[selectOption.length - 1]
    }));
  };

  var defaultMaxTagPlaceholder = function defaultMaxTagPlaceholder() {
    var selectOption = selectOptionRef.current;

    if (!(selectOption === null || selectOption === void 0 ? void 0 : selectOption.length)) {
      return;
    }

    var displayNodeList = selectOption.map(function (option) {
      return getSelectOptionText({
        selectOption: option[option.length - 1]
      });
    });
    var title = joinNode(displayNodeList, '、');
    return /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: "Cascader",
      defaultLocale: defaultLocale.Cascader
    }, function (locale) {
      var _a;

      return /*#__PURE__*/React.createElement(Tooltip, {
        title: title
      }, locale.selectedCount.replace(/\${count}/, String((_a = selectOptionRef.current) === null || _a === void 0 ? void 0 : _a.length)));
    });
  }; // ===================== Size ======================


  var size = React.useContext(SizeContext);
  var mergedSize = customizeSize || size; // ===================== Icon ======================

  var mergedExpandIcon = expandIcon;

  if (!expandIcon) {
    mergedExpandIcon = isRtl ? /*#__PURE__*/React.createElement(LeftFilled, null) : /*#__PURE__*/React.createElement(RightFilled, null);
  }

  var loadingIcon = /*#__PURE__*/React.createElement("span", {
    className: "".concat(prefixCls, "-menu-item-loading-icon")
  }, /*#__PURE__*/React.createElement(LoadingOutlined, {
    spin: true
  })); // =================== Multiple ====================

  var checkable = React.useMemo(function () {
    return multiple ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(cascaderPrefixCls, "-checkbox-inner")
    }) : false;
  }, [multiple]); // ===================== Icons =====================

  var _getIcons = getIcons(_extends(_extends({}, props), {
    hasFeedback: hasFeedback,
    feedbackIcon: feedbackIcon,
    showArrow: props.showArrow,
    multiple: multiple,
    prefixCls: prefixCls,
    dropDownVisible: dropDownVisible
  })),
      suffixIcon = _getIcons.suffixIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon; // =================== Callback ====================


  var handleChange = function handleChange(value, selectOption) {
    selectOptionRef.current = selectOption;
    onChange === null || onChange === void 0 ? void 0 : onChange(value, selectOption);
  }; // ==================== Render =====================


  var customDisplayRender = null;

  if (!children) {
    customDisplayRender = displayRender || defaultDisplayRender;
  }

  var mergeOptions = function mergeOptions(targetOptions) {
    if (!Array.isArray(targetOptions)) {
      return targetOptions;
    } // eslint-disable-next-line @typescript-eslint/no-shadow


    return targetOptions.map(function (_a) {
      var _extends2;

      var detail = _a.detail,
          rest = __rest(_a, ["detail"]); // fix: fieldNames value 和 label 相同时 不用 Typography.Text 包裹 label
      // 因为 label 和 value 指向的值必须是有效的 value


      var _ref2 = fieldNames || {},
          _ref2$label = _ref2.label,
          targetLabelKey = _ref2$label === void 0 ? 'label' : _ref2$label,
          _ref2$value = _ref2.value,
          targetValueKey = _ref2$value === void 0 ? 'value' : _ref2$value,
          _ref2$children = _ref2.children,
          targetChildrenKey = _ref2$children === void 0 ? 'children' : _ref2$children;

      var label = rest[targetLabelKey];
      var content = rest[targetChildrenKey];
      var isSameFieldKey = targetLabelKey === targetValueKey;
      var wrappedLabel = isSameFieldKey ? label : wrapChildrenByTypography(label);

      if (detail && !isSameFieldKey) {
        wrappedLabel = [wrappedLabel,
        /*#__PURE__*/
        // eslint-disable-next-line react/jsx-key
        React.createElement("div", {
          className: "".concat(cascaderPrefixCls, "-content-detail")
        }, wrapChildrenByTypography(detail, {
          className: "".concat(cascaderPrefixCls, "-content-detail-text")
        }))];
      }

      return _extends(_extends({}, rest), (_extends2 = {}, _defineProperty(_extends2, targetChildrenKey, content && mergeOptions(content)), _defineProperty(_extends2, targetLabelKey, wrappedLabel), _extends2));
    });
  };

  var mergedOptions = options;

  if (!mergedShowSearch) {
    mergedOptions = mergeOptions(options);
  }

  return /*#__PURE__*/React.createElement(RcCascader, _extends({
    prefixCls: prefixCls,
    className: classNames(!customizePrefixCls && cascaderPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === 'large'), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === 'small'), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), isRtl), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className)
  }, restProps, {
    direction: mergedDirection,
    notFoundContent: mergedNotFoundContent,
    allowClear: allowClear,
    showSearch: mergedShowSearch,
    expandIcon: mergedExpandIcon,
    inputIcon: suffixIcon,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    loadingIcon: loadingIcon,
    checkable: checkable,
    dropdownClassName: mergedDropdownClassName,
    dropdownPrefixCls: customizePrefixCls || cascaderPrefixCls,
    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),
    transitionName: getTransitionName(rootPrefixCls, 'slide-up', transitionName),
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    ref: ref,
    onDropdownVisibleChange: setDropDownVisible,
    displayRender: customDisplayRender,
    maxTagPlaceholder: maxTagPlaceholder || defaultMaxTagPlaceholder,
    options: mergedOptions,
    onChange: handleChange,
    fieldNames: fieldNames
  }), children);
});
Cascader.displayName = 'Cascader';
export default Cascader;