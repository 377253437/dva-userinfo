import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import classNames from 'classnames';
import CheckOutlined from "@sensd/icons/es/icons/CheckOutlined";
import Checkbox from '../checkbox';
import Typography from '../typography';
import Tooltip from '../tooltip';

var SelectOption = function SelectOption(props) {
  var _classNames, _classNames2;

  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'sens-select-panel-option' : _props$prefixCls,
      disabled = props.disabled,
      multiple = props.multiple,
      label = props.label,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      detail = props.detail,
      active = props.active,
      disabledText = props.disabledText,
      onClick = props.onClick;
  var mergedCls = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _classNames), prefixCls);
  var renderOption = /*#__PURE__*/React.createElement("div", {
    className: mergedCls,
    onClick: onClick
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, (prefixIcon || multiple) && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, multiple && /*#__PURE__*/React.createElement(Checkbox, {
    disabled: disabled,
    checked: active
  }) || prefixIcon), /*#__PURE__*/React.createElement("div", {
    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-has-left"), prefixIcon), _defineProperty(_classNames2, "".concat(prefixCls, "-one-icon"), suffixIcon), _defineProperty(_classNames2, "".concat(prefixCls, "-two-icon"), suffixIcon && !multiple), _classNames2), "".concat(prefixCls, "-text"))
  }, /*#__PURE__*/React.createElement(Typography.Text, {
    ellipsis: {
      tooltip: !(disabledText && disabled)
    },
    className: "".concat(prefixCls, "-ellipsis")
  }, label), detail && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-detail")
  }, /*#__PURE__*/React.createElement(Typography.Text, {
    ellipsis: {
      tooltip: !(disabledText && disabled)
    },
    className: "".concat(prefixCls, "-ellipsis")
  }, detail))), /*#__PURE__*/React.createElement("div", {
    className: classNames(_defineProperty({}, "".concat(prefixCls, "-suffix"), suffixIcon && !multiple), "".concat(prefixCls, "-right"))
  }, suffixIcon && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-suffix-icon")
  }, suffixIcon), active && !multiple && /*#__PURE__*/React.createElement(CheckOutlined, null))));

  if (disabledText && disabled) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      title: disabledText,
      placement: "top"
    }, renderOption);
  }

  return renderOption;
};

export default /*#__PURE__*/React.forwardRef(SelectOption);