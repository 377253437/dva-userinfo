import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import classNames from 'classnames';
import CheckCircleFilled from "@sensd/icons/es/icons/CheckCircleFilled";
import CloseCircleFilled from "@sensd/icons/es/icons/CloseCircleFilled";
import ExclamationCircleFilled from "@sensd/icons/es/icons/ExclamationCircleFilled";
import WarningFilled from "@sensd/icons/es/icons/WarningFilled";
import Spin from '../spin';
import NoFound from './NoFound';
import ServerError from './ServerError';
import Unauthorized from './Unauthorized';
import NoData from './NoData';
import NetworkError from './NetworkError';
import NoResult from './NoResult';
import LoadingFail from './LoadingFail';
import { ConfigContext } from '../config-provider';
import devWarning from '../_util/devWarning';
import { tuple } from '../_util/type';
var IconMap = {
  success: CheckCircleFilled,
  error: CloseCircleFilled,
  info: ExclamationCircleFilled,
  warning: WarningFilled
};
var ExceptionMap = {
  '404': NoFound,
  '500': ServerError,
  '403': Unauthorized
};
var types = tuple('page', 'component');
var SizeTypes = tuple('large', 'small'); // ExceptionImageMap keys

var ExceptionStatus = Object.keys(ExceptionMap);

var getIconSize = function getIconSize() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'page';
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'large';

  switch (type) {
    case 'page':
      return size === 'large' ? '266px' : '192px';

    case 'component':
      return size === 'large' ? '100px' : '50px';

    default:
      return '266px';
  }
};
/**
 * Render icon if ExceptionStatus includes ,render svg image else render iconNode
 *
 * @param prefixCls
 * @param {status, icon}
 */


var renderIcon = function renderIcon(prefixCls, _ref) {
  var status = _ref.status,
      icon = _ref.icon,
      size = _ref.size,
      type = _ref.type,
      IconModule = _ref.IconModule;

  var _a;

  var className = classNames("".concat(prefixCls, "-icon"));
  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Result', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon"));

  if (ExceptionStatus.includes("".concat(status))) {
    var SVGComponent = null;

    if (IconModule) {
      SVGComponent = IconModule;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(className, " ").concat(prefixCls, "-image ").concat(prefixCls, "-image-").concat(type)
    }, SVGComponent ? /*#__PURE__*/React.createElement(SVGComponent, {
      type: type,
      size: getIconSize(type, size)
    }) : /*#__PURE__*/React.createElement(Spin, null));
  }

  var iconNode = /*#__PURE__*/React.createElement((_a = IconMap[status]) !== null && _a !== void 0 ? _a : IconMap.success, {
    style: {
      fontSize: getIconSize(type, size)
    }
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(className, " ").concat(prefixCls, "-image-").concat(type)
  }, icon || iconNode);
};

var renderTitle = function renderTitle(prefixCls, _ref2) {
  var title = _ref2.title,
      type = _ref2.type,
      size = _ref2.size;
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-title ").concat(prefixCls, "-title-").concat(type, " ").concat(prefixCls, "-title-").concat(type, "-").concat(size)
  }, title);
};

var renderSubTitle = function renderSubTitle(prefixCls, _ref3) {
  var subTitle = _ref3.subTitle,
      type = _ref3.type,
      size = _ref3.size;
  if (!subTitle) return null;
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-subtitle ").concat(prefixCls, "-subtitle-").concat(type, " ").concat(prefixCls, "-subtitle-").concat(type, "-").concat(size)
  }, subTitle);
};

var renderExtra = function renderExtra(prefixCls, _ref4) {
  var extra = _ref4.extra;
  return extra && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-extra")
  }, extra);
};

var Result = function Result(_ref5) {
  var customizePrefixCls = _ref5.prefixCls,
      customizeClassName = _ref5.className,
      subTitle = _ref5.subTitle,
      title = _ref5.title,
      style = _ref5.style,
      children = _ref5.children,
      _ref5$status = _ref5.status,
      status = _ref5$status === void 0 ? 'info' : _ref5$status,
      icon = _ref5.icon,
      extra = _ref5.extra,
      _ref5$type = _ref5.type,
      type = _ref5$type === void 0 ? 'page' : _ref5$type,
      _ref5$size = _ref5.size,
      size = _ref5$size === void 0 ? 'large' : _ref5$size;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('result', customizePrefixCls);
  var className = classNames(prefixCls, "".concat(prefixCls, "-").concat(type), "".concat(prefixCls, "-").concat(type, "-").concat(size), "".concat(prefixCls, "-").concat(status), customizeClassName, _defineProperty({}, "".concat(prefixCls, "-rtl"), direction === 'rtl'));
  var IconModule = ExceptionMap[status];
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: style
  }, renderIcon(prefixCls, {
    status: status,
    icon: icon,
    size: size,
    type: type,
    IconModule: IconModule
  }), renderTitle(prefixCls, {
    title: title,
    type: type,
    size: size
  }), renderSubTitle(prefixCls, {
    subTitle: subTitle,
    type: type,
    size: size,
    extra: extra
  }), renderExtra(prefixCls, {
    extra: extra
  }), children && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, children));
};

var generatePresetComponent = function generatePresetComponent(Component, defaultType) {
  return function (props) {
    var _props$type = props.type,
        type = _props$type === void 0 ? 'page' : _props$type,
        _props$size = props.size,
        size = _props$size === void 0 ? 'large' : _props$size;
    var resultType = defaultType !== null && defaultType !== void 0 ? defaultType : type;
    var icon = Component ? /*#__PURE__*/React.createElement(Component, {
      type: resultType,
      size: getIconSize(resultType, size)
    }) : /*#__PURE__*/React.createElement(Spin, null);
    return /*#__PURE__*/React.createElement(Result, _extends({}, props, {
      icon: icon,
      status: undefined,
      type: resultType
    }));
  };
};

Result.NetworkError = generatePresetComponent(NetworkError);
Result.NoResult = generatePresetComponent(NoResult);
Result.NoData = generatePresetComponent(NoData);
Result.LoadingFail = generatePresetComponent(LoadingFail, 'component');
export default Result;