import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
import TabNavList from "@sensd/rc-tabs/es/TabNavList";
import TabContext from "@sensd/rc-tabs/es/TabContext";
import toArray from "rc-util/es/Children/toArray";
import DownSelectFilled from "@sensd/icons/es/icons/DownFilled";
import AnchorContext from './context';
import { ConfigContext } from '../config-provider';
import devWarning from '../_util/devWarning';
import Typography from '../typography';

function parseTabList(children) {
  var flattenArr = toArray(children);
  devWarning(flattenArr.length > React.Children.count(children), 'HorizontalAnchor', "horizontal Anchor can't have nested children");
  return flattenArr.map(function (node) {
    if ( /*#__PURE__*/React.isValidElement(node)) {
      var key = node.props.href !== undefined ? String(node.props.href) : undefined;
      return {
        key: key,
        node: node,
        tab: node.props.title
      };
    }

    return null;
  }).filter(function (tab) {
    return tab;
  });
}

var animated = {
  inkBar: true,
  tabPane: false
};
var uuid = 0;

var HorizontalAnchor = function HorizontalAnchor(_ref) {
  var locale = _ref.locale,
      prefixCls = _ref.prefixCls,
      children = _ref.children;
  var configContext = React.useContext(ConfigContext);
  var anchorContext = React.useContext(AnchorContext);

  var _React$useState = React.useState(),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      id = _React$useState2[0],
      setId = _React$useState2[1];

  React.useEffect(function () {
    if (!id) {
      setId("rc-tabs-".concat(process.env.NODE_ENV === 'test' ? 'test' : uuid));
      uuid += 1;
    }
  }, []);
  var tabContextValue = React.useMemo(function () {
    return {
      tabs: parseTabList(children),
      prefixCls: configContext.getPrefixCls('tabs')
    };
  }, [children]);
  React.useEffect(function () {
    tabContextValue.tabs.forEach(function (tab) {
      return anchorContext.registerLink(tab.key);
    });
    return function () {
      tabContextValue.tabs.forEach(function (tab) {
        return anchorContext.unregisterLink(tab.key);
      });
    };
  }, [tabContextValue]);

  var handleTabClick = function handleTabClick(href, e) {
    var _a;

    var scrollTo = anchorContext.scrollTo,
        onClick = anchorContext.onClick; // find title by href

    var title = (_a = tabContextValue.tabs.find(function (tab) {
      return tab.key === href;
    })) === null || _a === void 0 ? void 0 : _a.tab;
    onClick === null || onClick === void 0 ? void 0 : onClick(e, {
      href: href,
      title: title
    });
    scrollTo(href);
  };

  var moreIcon = function moreIcon(dropdownVisible) {
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-more-icon")
    }, /*#__PURE__*/React.createElement("span", null, locale.all), /*#__PURE__*/React.createElement(DownSelectFilled, {
      rotate: dropdownVisible ? 180 : 0
    }));
  };

  var dropdownItemRenderWrapper = function dropdownItemRenderWrapper(node) {
    return /*#__PURE__*/React.createElement(Typography.Text, {
      className: "".concat(prefixCls, "-typography"),
      ellipsis: {
        tooltip: node
      }
    }, node);
  };

  return /*#__PURE__*/React.createElement(TabContext.Provider, {
    value: tabContextValue
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-horizontal")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(tabContextValue.prefixCls, " ").concat(tabContextValue.prefixCls, "-top")
  }, /*#__PURE__*/React.createElement(TabNavList, {
    id: id,
    activeKey: anchorContext.activeLink,
    tabPosition: "top",
    animated: animated,
    onTabClick: handleTabClick,
    rtl: configContext.direction === 'rtl',
    mobile: false,
    panes: children // panes isn't used in TabNavList, but is required props
    ,
    moreIcon: moreIcon,
    dropdownProps: {
      trigger: ['click'],
      overlayStyle: {
        width: '200px'
      }
    },
    boundaryOffset: 4,
    dropdownItemRenderWrapper: dropdownItemRenderWrapper,
    dropdownMode: "all"
  }, function (node) {
    var newChildren = React.Children.map(node.props.children, function (child) {
      if (child) {
        return /*#__PURE__*/React.cloneElement(child, {}, /*#__PURE__*/React.createElement(Typography.Text, {
          className: "".concat(prefixCls, "-typography"),
          ellipsis: {
            tooltip: child.props.children
          }
        }, child.props.children));
      }
    });
    return React.cloneElement.apply(React, [node, {}].concat(_toConsumableArray(newChildren)));
  }))));
};

export default HorizontalAnchor;