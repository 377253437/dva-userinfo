import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import * as React from 'react';
import Selector from '../select/selector';
import { toArray, toLabeledValues } from './utils';

var InternalSelector = function InternalSelector(props) {
  var internalValue = props.internalValue,
      getDisplayValues = props.getDisplayValues,
      multiple = props.multiple,
      selectorSimpleMode = props.selectorSimpleMode,
      maxTagCount = props.maxTagCount,
      maxTagPlaceholder = props.maxTagPlaceholder,
      placeholder = props.placeholder,
      labelInValue = props.labelInValue,
      prefixIcon = props.prefixIcon,
      toggleConfirm = props.toggleConfirm,
      onOptionSelect = props.onOptionSelect;

  var onRemoveSelectorTag = function onRemoveSelectorTag(value) {
    toggleConfirm(true);
    onOptionSelect(value, {
      selected: false,
      source: 'clear'
    });
  };

  var rawValue = toArray(internalValue);
  var keyValue = rawValue.map(function (val) {
    return _typeof(val) === 'object' ? val.value : val;
  });
  var rawLabel = toLabeledValues(keyValue);
  var displayValues = getDisplayValues(keyValue, rawLabel);

  if (labelInValue) {
    displayValues = displayValues.map(function (item) {
      return _extends(_extends({}, item), {
        value: item.value,
        label: item.label
      });
    });
  }

  var value;

  if (multiple) {
    value = displayValues;

    if (maxTagCount && typeof maxTagCount === 'number') {
      var omittedValues = value.slice(maxTagCount);
      value = value.slice(0, maxTagCount);

      if (omittedValues.length) {
        var maxTagLabel = "+ ".concat(omittedValues.length, "...");

        if (maxTagPlaceholder) {
          maxTagLabel = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
        }

        value.push({
          label: maxTagLabel,
          value: 'max-tag',
          closable: false
        });
      }
    }
  } else {
    var _displayValues = displayValues;

    var _displayValues2 = _slicedToArray(_displayValues, 1);

    value = _displayValues2[0];
  }

  return /*#__PURE__*/React.createElement(Selector, {
    displayValue: keyValue.length === 0 ? undefined : value,
    selectorSimpleMode: selectorSimpleMode,
    placeholder: placeholder,
    prefixIcon: prefixIcon,
    onClose: onRemoveSelectorTag
  });
};

export default InternalSelector;