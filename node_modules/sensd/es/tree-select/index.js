import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from '@sensd/rc-tree-select';
import classNames from 'classnames';
import omit from "rc-util/es/omit";
import useMergedState from "rc-util/es/hooks/useMergedState";
import { ConfigContext } from '../config-provider';
import devWarning from '../_util/devWarning';
import getIcons from '../select/utils/iconUtil';
import renderSwitcherIcon from '../tree/utils/iconUtil';
import SizeContext from '../config-provider/SizeContext';
import { getTransitionName } from '../_util/motion';
import WrapperTree from './WrapperTree';
import Selector from './Selector';
import { toLabeledValues } from './utils';
import { FormItemInputContext } from '../form/context';
import { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';

var InternalTreeSelect = function InternalTreeSelect(_a, ref) {
  var _classNames2;

  var customizePrefixCls = _a.prefixCls,
      customizeSize = _a.size,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      className = _a.className,
      treeCheckable = _a.treeCheckable,
      _a$treeNodeFilterProp = _a.treeNodeFilterProp,
      treeNodeFilterProp = _a$treeNodeFilterProp === void 0 ? 'title' : _a$treeNodeFilterProp,
      multiple = _a.multiple,
      _a$listHeight = _a.listHeight,
      listHeight = _a$listHeight === void 0 ? 358 : _a$listHeight,
      _a$listItemHeight = _a.listItemHeight,
      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,
      notFoundContent = _a.notFoundContent,
      _switcherIcon = _a.switcherIcon,
      treeLine = _a.treeLine,
      getPopupContainer = _a.getPopupContainer,
      dropdownClassName = _a.dropdownClassName,
      _a$treeIcon = _a.treeIcon,
      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,
      transitionName = _a.transitionName,
      _a$choiceTransitionNa = _a.choiceTransitionName,
      choiceTransitionName = _a$choiceTransitionNa === void 0 ? '' : _a$choiceTransitionNa,
      defaultValue = _a.defaultValue,
      propsValue = _a.value,
      onChange = _a.onChange,
      showConfirm = _a.showConfirm,
      showCheckAll = _a.showCheckAll,
      statistics = _a.statistics,
      noDataDesc = _a.noDataDesc,
      noDataTitle = _a.noDataTitle,
      noResultDesc = _a.noResultDesc,
      noResultTitle = _a.noResultTitle,
      showSearch = _a.showSearch,
      searchValue = _a.searchValue,
      onSearch = _a.onSearch,
      onDropdownVisibleChange = _a.onDropdownVisibleChange,
      selectorSimpleMode = _a.selectorSimpleMode,
      selectorRender = _a.selectorRender,
      filterTreeNode = _a.filterTreeNode,
      _a$showArrow = _a.showArrow,
      showArrow = _a$showArrow === void 0 ? true : _a$showArrow,
      placeholder = _a.placeholder,
      maxTagCount = _a.maxTagCount,
      maxTagPlaceholder = _a.maxTagPlaceholder,
      treeCheckStrictly = _a.treeCheckStrictly,
      labelInValue = _a.labelInValue,
      dropdownOptLeft = _a.dropdownOptLeft,
      dropdownSearchPlaceholder = _a.dropdownSearchPlaceholder,
      selectAllText = _a.selectAllText,
      cancelText = _a.cancelText,
      okText = _a.okText,
      prefixIcon = _a.prefixIcon,
      treeNodeLabelProp = _a.treeNodeLabelProp,
      autoClearSearchValue = _a.autoClearSearchValue,
      customStatus = _a.status,
      filterSort = _a.filterSort,
      props = __rest(_a, ["prefixCls", "size", "bordered", "className", "treeCheckable", "treeNodeFilterProp", "multiple", "listHeight", "listItemHeight", "notFoundContent", "switcherIcon", "treeLine", "getPopupContainer", "dropdownClassName", "treeIcon", "transitionName", "choiceTransitionName", "defaultValue", "value", "onChange", "showConfirm", "showCheckAll", "statistics", "noDataDesc", "noDataTitle", "noResultDesc", "noResultTitle", "showSearch", "searchValue", "onSearch", "onDropdownVisibleChange", "selectorSimpleMode", "selectorRender", "filterTreeNode", "showArrow", "placeholder", "maxTagCount", "maxTagPlaceholder", "treeCheckStrictly", "labelInValue", "dropdownOptLeft", "dropdownSearchPlaceholder", "selectAllText", "cancelText", "okText", "prefixIcon", "treeNodeLabelProp", "autoClearSearchValue", "status", "filterSort"]);

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

  var size = React.useContext(SizeContext);
  devWarning(multiple !== false || !treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true');
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);
  var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);
  var mergedDropdownClassName = classNames(dropdownClassName, "".concat(treeSelectPrefixCls, "-dropdown"), _defineProperty({}, "".concat(treeSelectPrefixCls, "-dropdown-rtl"), direction === 'rtl'));
  var isMultiple = !!(treeCheckable || multiple);
  var mergedLabelInValue = treeCheckStrictly || labelInValue; // ===================== internal value ============

  var _useMergedState = useMergedState(defaultValue, {
    value: propsValue
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      internalValue = _useMergedState2[0],
      setInternalValue = _useMergedState2[1];

  var _React$useState = React.useState(internalValue),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      panelValue = _React$useState2[0],
      setPanelValue = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      dropdownOpen = _React$useState4[0],
      setDropdownOpen = _React$useState4[1]; // 是否对外触发 onChange 事件的 lock 锁


  var isConfirmRef = React.useRef(!showConfirm);

  var toggleConfirmRef = function toggleConfirmRef(flag) {
    isConfirmRef.current = flag;
  };

  React.useEffect(function () {
    toggleConfirmRef(!showConfirm);
  }, [showConfirm]);
  React.useEffect(function () {
    setPanelValue(internalValue);
  }, [internalValue]);

  var onInternalChange = function onInternalChange(value, labelList, extra) {
    setPanelValue(value); // 如果没有 showConfirm 或者通过点击多选选项的 x 删除的，则也要触发 onChange
    // 判断是点击多选选项的 x 通过 useRef 来判断标记，同时不会因为使用 setState 的 api 导致重新 render

    if (!showConfirm || isConfirmRef.current) {
      setInternalValue(value);
      onChange === null || onChange === void 0 ? void 0 : onChange(value, labelList, extra);
      toggleConfirmRef(false);
    }
  };

  var setInnerValue = function setInnerValue(_ref) {
    var value = _ref.value,
        labelList = _ref.labelList,
        extra = _ref.extra,
        triggerChange = _ref.triggerChange;
    setPanelValue(value);

    if (triggerChange && labelList && extra) {
      var finalExtra = showConfirm ? _extends(_extends({}, extra), {
        preValue: toLabeledValues(internalValue)
      }) : extra;
      setInternalValue(value);
      onChange === null || onChange === void 0 ? void 0 : onChange(value, labelList, finalExtra);
    }
  };

  var resetValue = function resetValue() {
    setPanelValue(internalValue);
  };

  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(open) {
    setDropdownOpen(open); // 有 showConfirm 的情况下，如果没有点击确定，则会还原值；点击确定的情况下，internalValue 也是最新的了，等于没有变化

    if (showConfirm && !open) {
      setPanelValue(internalValue);
    }

    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(open);
  }; // ===================== Form =====================


  var _React$useContext2 = React.useContext(FormItemInputContext),
      contextStatus = _React$useContext2.status,
      hasFeedback = _React$useContext2.hasFeedback,
      feedbackIcon = _React$useContext2.feedbackIcon;

  var mergedStatus = getMergedStatus(contextStatus, customStatus); // ===================== Icons =====================

  var _getIcons = getIcons(_extends(_extends({}, props), {
    multiple: isMultiple,
    showArrow: showArrow,
    hasFeedback: hasFeedback,
    feedbackIcon: feedbackIcon,
    prefixCls: prefixCls,
    dropDownVisible: dropdownOpen
  })),
      suffixIcon = _getIcons.suffixIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================


  var mergedNotFound;

  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else {
    mergedNotFound = renderEmpty('Select');
  } // ==================== Render =====================


  var selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);
  var mergedSize = customizeSize || size;
  var mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === 'large'), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === 'small'), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-simple"), selectorSimpleMode && isMultiple), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);
  var rootPrefixCls = getPrefixCls();

  var customerSelector = function customerSelector(_ref2) {
    var getDisplayValues = _ref2.getDisplayValues,
        onOptionSelect = _ref2.onOptionSelect;
    return /*#__PURE__*/React.createElement(Selector, {
      internalValue: internalValue,
      getDisplayValues: getDisplayValues,
      selectorSimpleMode: selectorSimpleMode,
      multiple: multiple || !!treeCheckable,
      placeholder: placeholder,
      maxTagCount: maxTagCount,
      maxTagPlaceholder: maxTagPlaceholder,
      labelInValue: mergedLabelInValue,
      onOptionSelect: onOptionSelect,
      toggleConfirm: toggleConfirmRef,
      prefixIcon: prefixIcon
    });
  };

  var optionRender = function optionRender(tree, _ref3) {
    var treeData = _ref3.treeData,
        keyEntities = _ref3.keyEntities,
        fieldNames = _ref3.fieldNames,
        toggleOpen = _ref3.toggleOpen,
        onSelect = _ref3.onSelect,
        triggerChange = _ref3.triggerChange;
    return /*#__PURE__*/React.createElement(WrapperTree, {
      tree: tree,
      prefixCls: prefixCls,
      treePrefixCls: treePrefixCls,
      treeData: treeData,
      keyEntities: keyEntities,
      fieldNames: fieldNames,
      statistics: statistics,
      multiple: multiple || !!treeCheckable,
      noDataDesc: noDataDesc,
      noDataTitle: noDataTitle,
      noResultDesc: noResultDesc,
      noResultTitle: noResultTitle,
      value: panelValue,
      setInnerValue: setInnerValue,
      showSearch: showSearch,
      searchValue: searchValue,
      onSearch: onSearch,
      toggleOpen: toggleOpen,
      treeCheckStrictly: treeCheckStrictly,
      showCheckAll: showCheckAll,
      showConfirm: showConfirm,
      treeNodeFilterProp: treeNodeFilterProp,
      filterTreeNode: filterTreeNode,
      onSelect: onSelect,
      triggerChange: triggerChange,
      dropdownOptLeft: dropdownOptLeft,
      dropdownSearchPlaceholder: dropdownSearchPlaceholder,
      selectAllText: selectAllText,
      cancelText: cancelText,
      okText: okText,
      treeNodeLabelProp: treeNodeLabelProp,
      autoClearSearchValue: autoClearSearchValue,
      resetValue: resetValue,
      filterSort: filterSort
    });
  };

  return /*#__PURE__*/React.createElement(RcTreeSelect, _extends({
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth,
    showArrow: showArrow,
    treeCheckStrictly: treeCheckStrictly,
    labelInValue: labelInValue,
    placeholder: placeholder
  }, selectProps, {
    ref: ref,
    prefixCls: prefixCls,
    className: mergedClassName,
    treeClassName: classNames(_defineProperty({}, "".concat(treePrefixCls, "-select-line"), !multiple && !treeCheckable)),
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    treeCheckable: multiple || treeCheckable ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-tree-checkbox-inner")
    }) : treeCheckable,
    treeLine: !!treeLine,
    inputIcon: suffixIcon,
    multiple: multiple,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    switcherIcon: function switcherIcon(nodeProps) {
      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);
    },
    showTreeIcon: treeIcon,
    showSearch: false,
    notFoundContent: mergedNotFound,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    treeMotion: null,
    dropdownClassName: mergedDropdownClassName,
    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),
    transitionName: getTransitionName(rootPrefixCls, 'slide-up', transitionName),
    value: panelValue,
    onChange: onInternalChange,
    optionRender: optionRender // @ts-ignore
    ,
    customerSelector: customerSelector,
    onDropdownVisibleChange: onInternalDropdownVisibleChange,
    getRawInputElement: selectorRender,
    dropdownAutoClose: !showConfirm,
    treeNodeLabelProp: treeNodeLabelProp
  }));
};

var TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);
var TreeSelect = TreeSelectRef;
TreeSelect.TreeNode = TreeNode;
TreeSelect.SHOW_ALL = SHOW_ALL;
TreeSelect.SHOW_PARENT = SHOW_PARENT;
TreeSelect.SHOW_CHILD = SHOW_CHILD;
export { TreeNode };
export default TreeSelect;