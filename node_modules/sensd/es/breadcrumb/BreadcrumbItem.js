import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import * as React from 'react';
import MoreOutlined from "@sensd/icons/es/icons/MoreOutlined";
import classNames from 'classnames';
import omit from "rc-util/es/omit";
import Typography from '../typography';
import DropDown from '../dropdown/dropdown';
import { ConfigContext } from '../config-provider';

var BreadcrumbItem = function BreadcrumbItem(_a) {
  var customizePrefixCls = _a.prefixCls,
      _a$separator = _a.separator,
      separator = _a$separator === void 0 ? '/' : _a$separator,
      children = _a.children,
      overlay = _a.overlay,
      dropdownProps = _a.dropdownProps,
      isFoldItem = _a.isFoldItem,
      restProps = __rest(_a, ["prefixCls", "separator", "children", "overlay", "dropdownProps", "isFoldItem"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);
  /** If overlay is have Wrap a DropDown */

  var renderBreadcrumbNode = function renderBreadcrumbNode(breadcrumbItem) {
    if (overlay) {
      return /*#__PURE__*/React.createElement(DropDown, _extends({
        overlay: overlay,
        placement: "bottomCenter"
      }, dropdownProps), /*#__PURE__*/React.createElement("span", {
        className: classNames("".concat(prefixCls, "-overlay-link"), _defineProperty({}, "".concat(prefixCls, "-fold-item"), isFoldItem))
      }, breadcrumbItem, /*#__PURE__*/React.createElement(MoreOutlined, null)));
    }

    return breadcrumbItem;
  };

  var link;

  var href = restProps.href,
      otherProps = __rest(restProps, ["href"]);

  var linkProps = omit(_extends({
    className: "".concat(prefixCls, "-link")
  }, otherProps), ['onClick']);
  link = typeof children === 'string' ? /*#__PURE__*/React.createElement(Typography.Text, _extends({}, linkProps, {
    ellipsis: {
      tooltip: /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-tooltip")
      }, children)
    }
  }), children) : /*#__PURE__*/React.createElement("span", linkProps, children);

  if ('href' in restProps) {
    link = /*#__PURE__*/React.createElement("a", {
      className: "".concat(prefixCls, "-typography-link"),
      href: href
    }, link);
  } // wrap to dropDown


  link = renderBreadcrumbNode(link);

  if (children || isFoldItem) {
    return /*#__PURE__*/React.createElement("span", null, link, separator && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-separator")
    }, separator));
  }

  return null;
};

BreadcrumbItem.__SENS_BREADCRUMB_ITEM = true;
export default BreadcrumbItem;