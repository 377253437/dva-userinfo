import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import React, { useContext, useCallback } from 'react';
import classNames from 'classnames';
import CloseOutlined from "@sensd/icons/es/icons/CloseOutlined";
import List from 'rc-virtual-list';
import { ConfigContext } from '../config-provider';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale/default';
import Typography from '../typography';
import Result from '../result';
import Button from '../button';
var NoData = Result.NoData;

var SelectedPanel = function SelectedPanel(props) {
  var customizePrefixCls = props.prefixCls,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      contentHeight = props.contentHeight,
      maxCount = props.maxCount,
      _props$clearConfirm = props.clearConfirm,
      clearConfirm = _props$clearConfirm === void 0 ? false : _props$clearConfirm,
      onChange = props.onChange;

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select-transfer', customizePrefixCls);
  var listRef = React.useRef(null); // 禁用清空按钮

  var disableClear = options.length === (options === null || options === void 0 ? void 0 : options.filter(function (_ref) {
    var disabled = _ref.disabled;
    return disabled;
  }).length);
  var onDeleteClick = useCallback(function (delItem) {
    if (delItem.disabled) return;
    var newData = options.filter(function (_ref2) {
      var value = _ref2.value;
      return value !== delItem.value;
    });
    var newVals = newData.map(function (_ref3) {
      var value = _ref3.value;
      return value;
    });
    onChange === null || onChange === void 0 ? void 0 : onChange(newVals, newData);
  }, [onChange, options]);
  var onClearClick = useCallback(function (e) {
    e.stopPropagation();
    var newData = options.filter(function (_ref4) {
      var disabled = _ref4.disabled;
      return disabled;
    });
    var newVals = newData.map(function (_ref5) {
      var value = _ref5.value;
      return value;
    });
    onChange === null || onChange === void 0 ? void 0 : onChange(newVals, newData);
  }, [onChange]);

  var renderEmpty = function renderEmpty(locale) {
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-selected-noData")
    }, /*#__PURE__*/React.createElement(NoData, {
      title: locale.noData,
      type: "component",
      subTitle: /*#__PURE__*/React.createElement("span", null, locale.emptyText)
    }));
  };

  var renderFooter = function renderFooter(locale) {
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-selected-footer")
    }, _typeof(clearConfirm) === 'object' ? clearConfirm : /*#__PURE__*/React.createElement(Button, {
      type: "link",
      linkType: "normal",
      onClick: onClearClick,
      disabled: disableClear
    }, locale.clearAll), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-selected-count")
    }, /*#__PURE__*/React.createElement("span", null, locale.selectedCount.replace(/\${count}/, String(options.length))), maxCount !== undefined ? /*#__PURE__*/React.createElement("span", null, locale.maxCount.replace(/\${max}/, String(maxCount))) : null));
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-selected")
  }, (options === null || options === void 0 ? void 0 : options.length) === 0 ? /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "SelectTransfer",
    defaultLocale: defaultLocale.SelectTransfer
  }, renderEmpty) : /*#__PURE__*/React.createElement("ul", {
    className: "".concat(prefixCls, "-selected-container")
  }, /*#__PURE__*/React.createElement(List, {
    ref: listRef,
    itemKey: "label",
    data: options,
    height: contentHeight - 52,
    fullHeight: false
  }, function (item, index) {
    return /*#__PURE__*/React.createElement("li", {
      key: index,
      className: classNames(_defineProperty({}, "".concat(prefixCls, "-selected-item-disabled"), item === null || item === void 0 ? void 0 : item.disabled), "".concat(prefixCls, "-selected-item"))
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-selected-item-title")
    }, /*#__PURE__*/React.createElement("p", {
      className: "".concat(prefixCls, "-selected-item-label")
    }, /*#__PURE__*/React.createElement(Typography.Text, {
      ellipsis: {
        tooltip: true
      },
      className: "".concat(prefixCls, "-ellipsis")
    }, item === null || item === void 0 ? void 0 : item.label)), /*#__PURE__*/React.createElement(Button, {
      type: "link",
      linkType: "normal",
      icon: /*#__PURE__*/React.createElement(CloseOutlined, null),
      disabled: item === null || item === void 0 ? void 0 : item.disabled,
      onClick: function onClick() {
        return onDeleteClick(item);
      }
    })), (item === null || item === void 0 ? void 0 : item.detail) && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-selected-item-detail")
    }, /*#__PURE__*/React.createElement(Typography.Text, {
      ellipsis: {
        tooltip: true
      },
      className: "".concat(prefixCls, "-ellipsis")
    }, item === null || item === void 0 ? void 0 : item.detail)));
  })), /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "SelectTransfer",
    defaultLocale: defaultLocale.SelectTransfer
  }, renderFooter));
};

export default SelectedPanel;