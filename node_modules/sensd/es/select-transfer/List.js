import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { useState, useContext, useEffect } from 'react';
import { fillFieldNames } from "@sensd/rc-select/es/utils/valueUtil";
import { ConfigContext } from '../config-provider';
import { Row, Col } from '../grid';
import SelectPanel from '../select-panel';
import SelectedPanel from './selectedPanel';

var List = function List(props) {
  var customizePrefixCls = props.prefixCls,
      maxCount = props.maxCount,
      options = props.options,
      value = props.value,
      _props$contentHeight = props.contentHeight,
      contentHeight = _props$contentHeight === void 0 ? 440 : _props$contentHeight,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? [10, 10] : _props$grid,
      clearConfirm = props.clearConfirm,
      onChange = props.onChange,
      restProps = __rest(props, ["prefixCls", "maxCount", "options", "value", "contentHeight", "grid", "clearConfirm", "onChange"]);

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      selectOptions = _useState2[0],
      setSelectOptions = _useState2[1];

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select-transfer', customizePrefixCls); // 内部select的高度

  var listHeight = (options === null || options === void 0 ? void 0 : options.length) < 9 ? contentHeight - 80 : contentHeight - 110;
  var fieldNames = restProps.fieldNames;
  var mergedFiledNames = fillFieldNames(fieldNames, false);
  useEffect(function () {
    var newOptions = [];
    value === null || value === void 0 ? void 0 : value.forEach(function (val) {
      return options === null || options === void 0 ? void 0 : options.forEach(function (item) {
        if (item[mergedFiledNames.value] === val) {
          newOptions.push(_extends(_extends({}, item), {
            label: item[mergedFiledNames.label],
            value: item[mergedFiledNames.value]
          }));
        }
      });
    });
    setSelectOptions(newOptions);
  }, [value]);

  var handleChange = function handleChange(val, option) {
    onChange === null || onChange === void 0 ? void 0 : onChange(val, option);
  };

  return /*#__PURE__*/React.createElement("div", {
    style: {
      height: contentHeight
    },
    className: prefixCls
  }, /*#__PURE__*/React.createElement(Row, {
    gutter: 8,
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(Col, {
    span: grid[0],
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, /*#__PURE__*/React.createElement(SelectPanel.List, _extends({
    options: options,
    listHeight: maxCount !== undefined ? listHeight + 46 : listHeight,
    maxCount: maxCount,
    footer: maxCount === undefined,
    multiple: true,
    value: value,
    onChange: handleChange,
    showSearch: true,
    statistics: true
  }, restProps)))), /*#__PURE__*/React.createElement(Col, {
    span: grid[1],
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-right")
  }, /*#__PURE__*/React.createElement(SelectedPanel, {
    clearConfirm: clearConfirm,
    maxCount: maxCount,
    contentHeight: contentHeight,
    options: selectOptions,
    onChange: handleChange
  })))));
};

export default List;