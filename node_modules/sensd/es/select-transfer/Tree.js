import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { useState, useContext, useEffect } from 'react';
import { convertDataToEntities, fillFieldNames } from "@sensd/rc-tree/es/utils/treeUtil";
import { ConfigContext } from '../config-provider';
import { Row, Col } from '../grid';
import SelectPanel from '../select-panel';
import SelectedPanel from './selectedPanel';

var Tree = function Tree(props) {
  var customizePrefixCls = props.prefixCls,
      maxCount = props.maxCount,
      treeData = props.treeData,
      value = props.value,
      _props$contentHeight = props.contentHeight,
      contentHeight = _props$contentHeight === void 0 ? 440 : _props$contentHeight,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? [10, 10] : _props$grid,
      clearConfirm = props.clearConfirm,
      onChange = props.onChange,
      restProps = __rest(props, ["prefixCls", "maxCount", "treeData", "value", "contentHeight", "grid", "clearConfirm", "onChange"]);

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      selectOptions = _useState2[0],
      setSelectOptions = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      newTreeData = _useState4[0],
      setNewTreeData = _useState4[1];

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select-transfer', customizePrefixCls);
  var fieldNames = restProps.fieldNames;
  var mergedFiledNames = fillFieldNames(fieldNames); // 获取 treeSelect 列表内容高度

  var getInitListheight = function getInitListheight() {
    var _convertDataToEntitie = convertDataToEntities(treeData, {
      fieldNames: fieldNames
    }),
        keyEntities = _convertDataToEntitie.keyEntities;

    var listHeight = Object.keys(keyEntities).length < 9 ? contentHeight - 80 : contentHeight - 110;
    listHeight = maxCount !== undefined ? listHeight + 46 : listHeight;
    return listHeight;
  };

  var fillLegacyProps = function fillLegacyProps(dataNode) {
    if (!dataNode) {
      return dataNode;
    }

    var cloneNode = _extends({}, dataNode);

    if (!('props' in cloneNode)) {
      Object.defineProperty(cloneNode, 'props', {
        get: function get() {
          return cloneNode;
        }
      });
    }

    return cloneNode;
  };

  var getResultOption = function getResultOption(key, path, rest) {
    var resultString = '';
    path.forEach(function (arr) {
      resultString += "".concat(arr, "/");
    });
    return _extends({
      label: key,
      detail: resultString.slice(0, -1)
    }, rest);
  };

  var treeDataFactory = function treeDataFactory(initTreeData) {
    var searchResult = [];

    var InitOptions = function InitOptions(data, parent) {
      data === null || data === void 0 ? void 0 : data.forEach(function (item) {
        var result = fillLegacyProps(item);
        var tmp = [].concat(_toConsumableArray(parent), [result[mergedFiledNames.title]]);

        if (result[mergedFiledNames.children]) {
          InitOptions(result[mergedFiledNames.children], tmp);
        }

        var obj = getResultOption(result[mergedFiledNames.title], parent, result);
        searchResult.push(_extends(_extends({}, obj), {
          key: result[mergedFiledNames.key],
          value: result[mergedFiledNames.key]
        }));
      });
    };

    InitOptions(initTreeData, []);
    return searchResult;
  };

  useEffect(function () {
    var newData = treeDataFactory(treeData);
    setNewTreeData(newData);
  }, [treeData]);
  useEffect(function () {
    var newOptions = [];
    value === null || value === void 0 ? void 0 : value.forEach(function (data) {
      return newTreeData.forEach(function (item) {
        if (item.key === data) {
          newOptions.push(item);
        }
      });
    });
    setSelectOptions(newOptions);
  }, [value, newTreeData]);

  var handleChange = function handleChange(val, option) {
    onChange === null || onChange === void 0 ? void 0 : onChange(val, option);
  };

  return /*#__PURE__*/React.createElement("div", {
    style: {
      height: contentHeight
    },
    className: prefixCls
  }, /*#__PURE__*/React.createElement(Row, {
    gutter: 8,
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(Col, {
    span: grid[0],
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, /*#__PURE__*/React.createElement(SelectPanel.Tree, _extends({
    treeData: treeData,
    listHeight: getInitListheight(),
    footer: maxCount === undefined,
    multiple: true,
    value: value,
    maxCount: maxCount,
    onChange: handleChange,
    showSearch: true,
    statistics: true
  }, restProps)))), /*#__PURE__*/React.createElement(Col, {
    span: grid[1],
    style: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-right")
  }, /*#__PURE__*/React.createElement(SelectedPanel, {
    clearConfirm: clearConfirm,
    maxCount: maxCount,
    contentHeight: contentHeight,
    options: selectOptions,
    onChange: handleChange
  })))));
};

export default Tree;