// mixins for button
// ------------------------
.button-size(@height; @padding-horizontal; @font-size; @border-radius) {
  height: @height;
  padding: 0 @padding-horizontal;
  font-size: @font-size;
  border-radius: @border-radius;
  // icon 比文字大 2px，且只有 icon 时不放大
  .@{iconfont-css-prefix} {
    height: 1em;
    font-size: @font-size + 2px;
    vertical-align: middle;
  }
}

.button-color(@color; @background; @border; @icon:@color) {
  color: @color;
  border-color: @border; // a inside Button which only work in Chrome
  & when not(@background = null) {
    background: @background;
  }
  // http://stackoverflow.com/a/17253457
  > a:only-child {
    color: currentcolor;

    &::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background: transparent;
      content: '';
    }
  }
  & when not(@icon = null) {
    // 非主色时 icon 与字体颜色不同
    .@{iconfont-css-prefix} {
      color: @icon;
      transition: inherit; // icon 单独设置颜色时需同步加上 transition，否则无动画
    }
  }
}
// 文字、背景、边框的默认、悬浮、点击颜色
.button-color-all(
  @color; @background; @border; 
  @color-hover; @background-hover; @border-hover; 
  @color-active; @background-active; @border-active;
  @icon:@icon-color-transparent;
  ) {
  .button-color(@color; @background; @border; @icon );

  @hoverAndFocus: {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 7) `; ~`colorPalette('@{background}', 7) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(@color-hover; @background-hover; @border-hover);
    }
    & when (@theme = variable) {
      .button-color(@color-hover; @background-hover; @border-hover);
    }
  };

  &:hover {
    @hoverAndFocus();
  }
  // 与:hover 合并会导致不支持:focus-visible 的 safari 的 hover 也失效
  // see https://github.com/ant-design/ant-design/pull/34002
  &:focus-visible {
    @hoverAndFocus();
  }

  &:active {
    & when (@theme = dark) {
      .button-color(
        @color; ~`colorPalette('@{background}', 5) `; ~`colorPalette('@{background}', 5) `
      );
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(@color-active; @background-active; @border-active);
    }
    & when (@theme = variable) {
      .button-color(@color-active; @background-active; @border-active);
    }
  }
}

.button-disabled(
  @hasColor: true; 
  @hasBg:true ; 
  @hasBorder: true;
  ) {
  &[disabled] {
    &,
    &:hover,
    &:active {
      text-shadow: none;
      box-shadow: none;
    }

    &,
    &:active {
      .button-color(
        if(@hasColor,@text-color-transparent-disable,transparent);
        if(@hasBg,@background-transparent-grey-hover,transparent);
        if(@hasBorder,@divideline-color-transparent-light,transparent);
        @icon-color-transparent-disable;
      );
    }

    &:hover {
      .button-color(
        if(@hasColor,@text-color-transparent-disable-hover,transparent);
        if(@hasBg,@background-transparent-grey,transparent);
        if(@hasBorder,@line-color-transparent,transparent);
        @icon-color-transparent-disable-hover;
      );
    }
  }
}

.button-shadow(@hoverShadow:@shadowbox-3-down;@activeShadow:@shadowbox-active;) {
  &:hover {
    box-shadow: @hoverShadow;
  }

  &:focus-visible {
    box-shadow: @hoverShadow;
  }

  &:active {
    box-shadow: @activeShadow;
  }
}
.button-variant-other(@color; @background; @border) {
  .button-color(@color; @background; @border);
  @hoverAndFocus: {
    & when (@theme = dark) {
      .button-color(@primary-5; @background; @primary-5);
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        ~`colorPalette('@{btn-primary-bg}', 5) `; @background;
          ~`colorPalette('@{btn-primary-bg}', 5) `
      );
    }
    & when (@theme = variable) {
      .button-color(@primary-color-hover; @background; @primary-color-hover);
    }
  };

  &:hover {
    @hoverAndFocus();
  }

  &:focus-visible {
    @hoverAndFocus();
  }

  &:active {
    & when (@theme = dark) {
      .button-color(@primary-7; @background; @primary-7);
    }
    & when (not (@theme = dark) and not (@theme = variable)) {
      .button-color(
        ~`colorPalette('@{btn-primary-bg}', 7) `; @background;
          ~`colorPalette('@{btn-primary-bg}', 7) `
      );
    }
    & when (@theme = variable) {
      .button-color(@primary-color-active; @background; @primary-color-active);
    }
  }
}

.button-variant-ghost(@color; @border; @borderHover: yellow; @borderActive: yellow) {
  .button-color(@color; null; @border);
  text-shadow: none;

  @hoverAndFocus: {
    & when (@border = transparent) {
      & when (@theme = dark) {
        .button-color(~`colorPalette('@{color}', 7) `; null; transparent);
      }
      & when (not (@theme = dark) and not (@theme = variable)) {
        .button-color(~`colorPalette('@{color}', 5) `; null; transparent);
      }
      & when (@theme = variable) {
        .button-color(@borderActive; transparent; transparent);
      }
    }
    & when not (@border = transparent) {
      & when (@theme = dark) {
        .button-color(
          ~`colorPalette('@{color}', 7) `; null; ~`colorPalette('@{color}', 7) `
        );
      }
      & when (not (@theme = dark) and not (@theme = variable)) {
        .button-color(
          ~`colorPalette('@{color}', 5) `; null; ~`colorPalette('@{color}', 5) `
        );
      }
      & when (@theme = variable) {
        .button-color(@borderHover; transparent; @borderHover);
      }
    }
  };

  &:hover {
    @hoverAndFocus();
  }

  &:focus-visible {
    @hoverAndFocus();
  }

  &:active {
    & when (@border = transparent) {
      & when (@theme = dark) {
        .button-color(~`colorPalette('@{color}', 5) `; null; transparent);
      }
      & when (not (@theme = dark) and not (@theme = variable)) {
        .button-color(~`colorPalette('@{color}', 7) `; null; transparent);
      }
      & when (@theme = variable) {
        .button-color(@borderActive; transparent; transparent);
      }
    }
    & when not (@border = transparent) {
      & when (@theme = dark) {
        .button-color(
          ~`colorPalette('@{color}', 5) `; null; ~`colorPalette('@{color}', 5) `
        );
      }
      & when (not (@theme = dark) and not (@theme = variable)) {
        .button-color(
          ~`colorPalette('@{color}', 7) `; null; ~`colorPalette('@{color}', 7) `
        );
      }
      & when (@theme = variable) {
        .button-color(@borderActive; transparent; @borderActive);
      }
    }
  }
}

.button-group-base(@btnClassName) {
  position: relative;
  display: inline-flex;
  > .@{btnClassName},
  > span > .@{btnClassName} {
    position: relative;

    &:hover,
    &:active {
      z-index: 2;
    }

    &:focus-visible {
      z-index: 2;
    }

    &[disabled] {
      z-index: 0;
    }
  }
  .@{btnClassName}-icon-only {
    font-size: @font-size-base;
  }
  // size
  &-lg > .@{btnClassName},
  &-lg > span > .@{btnClassName} {
    .button-size(@btn-height-lg; @btn-padding-horizontal-lg; @btn-font-size-lg; 0);
  }
  &-lg .@{btnClassName}.@{btnClassName}-icon-only {
    .square(@btn-height-lg);
    padding-right: 0;
    padding-left: 0;
  }
  &-sm > .@{btnClassName},
  &-sm > span > .@{btnClassName} {
    .button-size(@btn-height-sm; @btn-padding-horizontal-sm; @font-size-base; 0);
    > .@{iconfont-css-prefix} {
      font-size: @font-size-base;
    }
  }
  &-sm .@{btnClassName}.@{btnClassName}-icon-only {
    .square(@btn-height-sm);
    padding-right: 0;
    padding-left: 0;
  }
}
// Base styles of buttons
// --------------------------------------------------
.btn() {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: @btn-font-weight;
  white-space: nowrap;
  text-align: center;
  vertical-align: middle;
  background-image: none;
  border: @btn-border-width @btn-border-style transparent;
  cursor: pointer;
  transition: all 0.3s @ease-in-out;
  user-select: none;
  touch-action: manipulation;
  .button-size(
    @btn-height-base; @btn-padding-horizontal-base; @font-size-base; @btn-border-radius-base
  );
  > .@{iconfont-css-prefix} {
    line-height: 1;
  }

  &,
  &:active {
    outline: 0;
  }

  &:focus-visible {
    outline: 0;
  }

  &:not([disabled]):hover {
    text-decoration: none;
  }

  &:not([disabled]):active {
    outline: 0;
  }

  &[disabled] {
    cursor: not-allowed;

    > * {
      pointer-events: none;
    }
  }

  &-lg {
    .button-size(
      @btn-height-lg; @btn-padding-horizontal-lg; @btn-font-size-lg; @btn-border-radius-base
    );
  }

  &-sm {
    .button-size(
      @btn-height-sm; @btn-padding-horizontal-sm; @btn-font-size-sm; @btn-border-radius-sm
    );
  }

  .button-disabled();
}
// primary button style
.btn-primary() {
  font-weight: 500;

  .button-shadow();

  .button-color-all(
    @white; @component-primary; @divideline-color-transparent-light;
    @white; @component-hover; @divideline-color-transparent-light;
    @white; @component-active; @divideline-color-transparent-light;
    null;
  );
}
// default button style
.btn-default() {
  .button-shadow();

  .button-color-all(
    @text-color-transparent; @white; @divideline-color-transparent-dack;
    @component-primary; @white; @component-primary;
    @component-active; @white; @component-active;
  );
}
// ghost button style
.btn-ghost() {
  .button-variant-other(@btn-ghost-color, @btn-ghost-bg, @btn-ghost-border);
}
// dashed button style
.btn-dashed() {
  border-style: dashed;

  .button-shadow(none);

  .button-color-all(
    @text-color-transparent; @white; @divideline-color-transparent-dack;
    @component-primary; @white; @component-primary;
    @component-active; @white; @component-active;
  );
}
// danger button style
.btn-danger() {
  .btn-danger-default();
}
// danger default button style
.btn-danger-default(@isConfirm:false) {
  .button-shadow(@shadowbox-3-down,@shadowbox-active-warning);

  .button-color-all(
    @text-color-transparent; @white; @divideline-color-transparent-dack;
    @warning-color; @white; @warning-color;
    @warning-color-active; @white; @warning-color-active;
  );

  & when (@isConfirm) {
    .button-color-all(
      @warning-color; @white; @warning-color;
      @warning-color-hover; @white; @warning-color-hover;
      @warning-color-active; @white; @warning-color-active;
      @warning-color;
    );
  }
  .button-disabled();
}
// danger link button style
.btn-danger-link(@isNormal:false) {
  .button-shadow(none,none);

  .button-color-all(
    @link-color; transparent; transparent;
    @warning-color; transparent; transparent;
    @warning-color-active; transparent; transparent;
    @link-color;
  );
  & when (@isNormal) {
    .button-color-all(
      @text-color-transparent; transparent; transparent;
      @warning-color; transparent; transparent;
      @warning-color-active; transparent; transparent;
    );
  }

  .button-disabled(true; false; false;);
}
// link button style
.btn-link(@isNormal:false) {
  height: auto;
  padding: 0;

  .button-color-all(
    @link-color; transparent; transparent;
    @link-hover-color; transparent; transparent;
    @link-active-color; transparent; transparent;
    @link-color;
  );
  & when (@isNormal) {
    .button-color-all(
      @text-color-transparent; transparent; transparent;
      @link-color; transparent; transparent;
      @link-active-color; transparent; transparent;
    );
  }

  .button-disabled(true; false; false;);
}
// text button style
.btn-text() {
  .button-color-all(
    @text-color-transparent; transparent; transparent;
    @component-primary; transparent; transparent;
    @component-active; transparent; transparent;
  );

  .button-disabled(true; false; false;);
}
.btn-danger-text(@isConfirm:false) {
  .button-shadow(none,none);

  .button-color-all(
    @text-color-transparent; transparent; transparent;
    @warning-color; transparent; transparent;
    @warning-color-active; transparent; transparent;
  );
  & when (@isConfirm) {
    .button-color-all(
      @warning-color; transparent; transparent;
      @warning-color-hover; transparent; transparent;
      @warning-color-active; transparent; transparent;
      @warning-color;
    );
  }

  .button-disabled(true; false; false;);
}
// round button
.btn-round(@btnClassName: btn) {
  .button-size(@btn-circle-size; (@btn-circle-size / 2); @font-size-base; @btn-circle-size);
  &.@{btnClassName}-lg {
    .button-size(
      @btn-circle-size-lg; (@btn-circle-size-lg / 2); @btn-font-size-lg; @btn-circle-size-lg
    );
  }
  &.@{btnClassName}-sm {
    .button-size(
      @btn-circle-size-sm; (@btn-circle-size-sm / 2); @font-size-base; @btn-circle-size-sm
    );
  }
}
// square button: the content only contains icon
.btn-square(@btnClassName: btn) {
  .square(@btn-square-size);
  .button-size(@btn-square-size; 0; @btn-square-only-icon-size; @btn-border-radius-base);

  & > * {
    font-size: @btn-square-only-icon-size;
  }
  &.@{btnClassName}-lg {
    .square(@btn-square-size-lg);
    .button-size(@btn-square-size-lg; 0; @btn-square-only-icon-size-lg; @btn-border-radius-base);

    & > * {
      font-size: @btn-square-only-icon-size-lg;
    }
  }
  &.@{btnClassName}-sm {
    .square(@btn-square-size-sm);
    .button-size(@btn-square-size-sm; 0; @btn-square-only-icon-size-sm; @btn-border-radius-base);

    & > * {
      font-size: @btn-square-only-icon-size-sm;
    }
  }
}
// circle button: the content only contains icon
.btn-circle(@btnClassName: btn) {
  min-width: @btn-height-base;
  padding-right: 0;
  padding-left: 0;
  text-align: center;
  border-radius: 50%;
  &.@{btnClassName}-lg {
    min-width: @btn-height-lg;
    border-radius: 50%;
  }
  &.@{btnClassName}-sm {
    min-width: @btn-height-sm;
    border-radius: 50%;
  }
}
// Horizontal button groups style
// --------------------------------------------------
.btn-group(@btnClassName: btn) {
  .button-group-base(@btnClassName);
  .@{btnClassName} + .@{btnClassName},
  .@{btnClassName} + &,
  span + .@{btnClassName},
  .@{btnClassName} + span,
  > span + span,
  & + .@{btnClassName},
  & + & {
    margin-left: -1px;
  }
  .@{btnClassName}-primary + .@{btnClassName}:not(.@{btnClassName}-primary):not([disabled]) {
    border-left-color: transparent;
  }
  .@{btnClassName} {
    border-radius: 0;
  }
  > .@{btnClassName}:first-child,
  > span:first-child > .@{btnClassName} {
    margin-left: 0;
  }
  > .@{btnClassName}:only-child {
    border-radius: @btn-border-radius-base;
  }
  > span:only-child > .@{btnClassName} {
    border-radius: @btn-border-radius-base;
  }
  > .@{btnClassName}:first-child:not(:last-child),
  > span:first-child:not(:last-child) > .@{btnClassName} {
    border-top-left-radius: @btn-border-radius-base;
    border-bottom-left-radius: @btn-border-radius-base;
  }
  > .@{btnClassName}:last-child:not(:first-child),
  > span:last-child:not(:first-child) > .@{btnClassName} {
    border-top-right-radius: @btn-border-radius-base;
    border-bottom-right-radius: @btn-border-radius-base;
  }

  &-sm {
    > .@{btnClassName}:only-child {
      border-radius: @btn-border-radius-sm;
    }
    > span:only-child > .@{btnClassName} {
      border-radius: @btn-border-radius-sm;
    }
    > .@{btnClassName}:first-child:not(:last-child),
    > span:first-child:not(:last-child) > .@{btnClassName} {
      border-top-left-radius: @btn-border-radius-sm;
      border-bottom-left-radius: @btn-border-radius-sm;
    }
    > .@{btnClassName}:last-child:not(:first-child),
    > span:last-child:not(:first-child) > .@{btnClassName} {
      border-top-right-radius: @btn-border-radius-sm;
      border-bottom-right-radius: @btn-border-radius-sm;
    }
  }

  & > & {
    float: left;
  }
  & > &:not(:first-child):not(:last-child) > .@{btnClassName} {
    border-radius: 0;
  }

  & > &:first-child:not(:last-child) {
    > .@{btnClassName}:last-child {
      padding-right: 8px;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
  & > &:last-child:not(:first-child) > .@{btnClassName}:first-child {
    padding-left: 8px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}
