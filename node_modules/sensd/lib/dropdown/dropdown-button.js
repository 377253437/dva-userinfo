"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MoreOutlined = _interopRequireDefault(require("@sensd/icons/MoreOutlined"));

var _LoadingOutlined = _interopRequireDefault(require("@sensd/icons/LoadingOutlined"));

var _DownFilled = _interopRequireDefault(require("@sensd/icons/DownFilled"));

var _UpFilled = _interopRequireDefault(require("@sensd/icons/UpFilled"));

var _button = _interopRequireDefault(require("../button"));

var _configProvider = require("../config-provider");

var _dropdown = _interopRequireDefault(require("./dropdown"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var isArrowButtonType = function isArrowButtonType(type) {
  return type === 'link';
};

var isOnlyHoverTrigger = function isOnlyHoverTrigger(trigger) {
  if (!trigger) {
    return true;
  }

  if (Array.isArray(trigger) && trigger.length === 1 && trigger[0] === 'hover') {
    return true;
  }

  return false;
};

var DropdownButton = function DropdownButton(props) {
  var _React$useContext = _react["default"].useContext(_configProvider.ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      _props$type = props.type,
      type = _props$type === void 0 ? 'default' : _props$type,
      disabled = props.disabled,
      loading = props.loading,
      onClick = props.onClick,
      htmlType = props.htmlType,
      children = props.children,
      className = props.className,
      overlay = props.overlay,
      trigger = props.trigger,
      align = props.align,
      visible = props.visible,
      onVisibleChange = props.onVisibleChange,
      placement = props.placement,
      getPopupContainer = props.getPopupContainer,
      href = props.href,
      icon = props.icon,
      title = props.title,
      _props$buttonsRender = props.buttonsRender,
      buttonsRender = _props$buttonsRender === void 0 ? function (buttons) {
    return buttons;
  } : _props$buttonsRender,
      mouseEnterDelay = props.mouseEnterDelay,
      mouseLeaveDelay = props.mouseLeaveDelay,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      destroyPopupOnHide = props.destroyPopupOnHide,
      _props$noWave = props.noWave,
      noWave = _props$noWave === void 0 ? false : _props$noWave,
      restProps = __rest(props, ["prefixCls", "type", "disabled", "loading", "onClick", "htmlType", "children", "className", "overlay", "trigger", "align", "visible", "onVisibleChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide", "noWave"]);

  var prefixCls = getPrefixCls('dropdown-button', customizePrefixCls);
  var overlayPrefixCls = getPrefixCls('dropdown', customizePrefixCls);
  var innerDisabled = disabled || loading;
  var triggerRef = (0, _react.useRef)(null);
  var listenerRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var handleVisibleChange = function handleVisibleChange(value) {
    setOpen(value);
    onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(value);
  };

  var getPopupDomNode = function getPopupDomNode() {
    var _a, _b;

    return (_b = (_a = triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) === null || _a === void 0 ? void 0 : _a.getPopupDomNode) === null || _b === void 0 ? void 0 : _b.call(_a);
  };

  var clearListener = function clearListener() {
    var popupDomNode = getPopupDomNode();

    if (listenerRef.current && popupDomNode) {
      popupDomNode.removeEventListener(listenerRef.current);
      listenerRef.current = null;
    }
  };

  var mergedTrigger = trigger || (isArrowButtonType(type) ? ['click'] : undefined);
  var onlyHoverTrigger = isOnlyHoverTrigger(mergedTrigger);
  var dropdownProps = {
    align: align,
    overlay: overlay,
    disabled: innerDisabled,
    trigger: disabled ? [] : mergedTrigger,
    onVisibleChange: handleVisibleChange,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    mouseEnterDelay: mouseEnterDelay,
    mouseLeaveDelay: mouseLeaveDelay,
    overlayClassName: (0, _classnames["default"])(overlayClassName, (0, _defineProperty2["default"])({}, "".concat(overlayPrefixCls, "-arrow-trigger"), isArrowButtonType(type))),
    overlayStyle: overlayStyle,
    destroyPopupOnHide: destroyPopupOnHide
  };

  if ('visible' in props) {
    dropdownProps.visible = visible;
  }

  if ('placement' in props) {
    dropdownProps.placement = placement;
  } else {
    dropdownProps.placement = direction === 'rtl' ? 'bottomLeft' : 'bottomRight';
  } // fix: 监听点击 menu 收起菜单


  (0, _react.useEffect)(function () {
    if (!open) {
      clearListener();
      return;
    }

    var popupDomNode = getPopupDomNode();

    if (!popupDomNode) {
      return;
    }

    clearListener();
    listenerRef.current = popupDomNode.addEventListener('click', function () {
      setTimeout(function () {
        var _a, _b;

        var popupVisible = (_b = (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.popupVisible;

        if (popupVisible !== open) {
          setOpen(popupVisible);
        }
      });
    });
  }, [open]);
  (0, _react.useEffect)(function () {
    return function () {
      clearListener();
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (innerDisabled && triggerRef.current) {
      // 禁用的时候默认收起弹窗
      // 依赖 trigger 组件实例方法
      triggerRef.current.setPopupVisible(false);
      setOpen(false);
    }
  }, [innerDisabled]);

  var renderSuffixIcon = function renderSuffixIcon() {
    if (loading) return /*#__PURE__*/_react["default"].createElement(_LoadingOutlined["default"], null);
    if (icon) return icon;

    if (isArrowButtonType(type)) {
      if (open) return /*#__PURE__*/_react["default"].createElement(_UpFilled["default"], null);
      return /*#__PURE__*/_react["default"].createElement(_DownFilled["default"], null);
    }

    return /*#__PURE__*/_react["default"].createElement(_MoreOutlined["default"], null);
  };

  var cls = (0, _classnames["default"])(prefixCls, className, (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-only-hover"), onlyHoverTrigger));

  var button = /*#__PURE__*/_react["default"].createElement(_button["default"], (0, _extends2["default"])({}, restProps, {
    className: cls,
    type: type,
    onClick: onClick,
    htmlType: htmlType,
    href: href,
    title: title,
    noWave: noWave || onlyHoverTrigger
  }), children, renderSuffixIcon());

  var _buttonsRender = buttonsRender([button, []]),
      _buttonsRender2 = (0, _slicedToArray2["default"])(_buttonsRender, 1),
      buttonToRender = _buttonsRender2[0];

  return /*#__PURE__*/_react["default"].createElement(_dropdown["default"], (0, _extends2["default"])({
    ref: triggerRef
  }, dropdownProps), buttonToRender);
};

DropdownButton.__SENS_BUTTON = true;
var _default = DropdownButton;
exports["default"] = _default;