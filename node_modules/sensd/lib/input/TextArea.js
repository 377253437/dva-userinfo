"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _rcTextarea = _interopRequireDefault(require("rc-textarea"));

var _omit = _interopRequireDefault(require("rc-util/lib/omit"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _ClearableLabeledInput = _interopRequireDefault(require("./ClearableLabeledInput"));

var _configProvider = require("../config-provider");

var _Input = require("./Input");

var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));

var _context = require("../form/context");

var _statusUtils = require("../_util/statusUtils");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var TextArea = /*#__PURE__*/_react["default"].forwardRef(function (_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      _a$showCount = _a.showCount,
      showCount = _a$showCount === void 0 ? false : _a$showCount,
      maxLength = _a.maxLength,
      className = _a.className,
      style = _a.style,
      customizeSize = _a.size,
      _onCompositionStart = _a.onCompositionStart,
      _onCompositionEnd = _a.onCompositionEnd,
      _onCompositionUpdate = _a.onCompositionUpdate,
      onChange = _a.onChange,
      customStatus = _a.status,
      props = __rest(_a, ["prefixCls", "bordered", "showCount", "maxLength", "className", "style", "size", "onCompositionStart", "onCompositionEnd", "onCompositionUpdate", "onChange", "status"]);

  var _React$useContext = _react["default"].useContext(_configProvider.ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = _react["default"].useContext(_SizeContext["default"]);

  var _React$useContext2 = _react["default"].useContext(_context.FormItemInputContext),
      contextStatus = _React$useContext2.status,
      hasFeedback = _React$useContext2.hasFeedback,
      feedbackIcon = _React$useContext2.feedbackIcon;

  var mergedStatus = (0, _statusUtils.getMergedStatus)(contextStatus, customStatus);

  var innerRef = _react["default"].useRef(null);

  var clearableInputRef = _react["default"].useRef(null);

  var _React$useState = _react["default"].useState(''),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      compositionValue = _React$useState2[0],
      setCompositionValue = _React$useState2[1];

  var isCompositionRef = _react["default"].useRef(false);

  var _useMergedState = (0, _useMergedState3["default"])(props.defaultValue, {
    value: props.value
  }),
      _useMergedState2 = (0, _slicedToArray2["default"])(_useMergedState, 2),
      value = _useMergedState2[0],
      setValue = _useMergedState2[1];

  var hidden = props.hidden;

  var handleSetValue = function handleSetValue(val, callback) {
    if (props.value === undefined) {
      setValue(val);
      callback === null || callback === void 0 ? void 0 : callback();
    }
  }; // =========================== Value Update ===========================
  // Max length value


  var hasMaxLength = Number(maxLength) > 0; // ============================== Reset ===============================

  var handleReset = function handleReset(e) {
    var _a, _b;

    handleSetValue('', function () {
      var _a;

      (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    });
    (0, _Input.resolveOnChange)((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, e, onChange);
  };

  var handleChangeCallback = function handleChangeCallback(e) {
    if (props.value === undefined) {
      setValue(e.target.value);
    }

    (0, _Input.resolveOnChange)(e.currentTarget, e, onChange, e.target.value);
  };

  var tryTriggerChangeCallback = function tryTriggerChangeCallback(e) {
    var newValue = e.target.value;
    var newLen = newValue.length;
    var valueLen = (0, _Input.fixControlledValue)(value).length; // value 内容超过最大长度后，可支持删除内容

    if (newValue !== value && (maxLength === undefined || newLen <= maxLength || newLen > maxLength && newLen < valueLen)) {
      e.target.value = newValue;
      handleChangeCallback(e);
    }
  };

  var handleComposition = function handleComposition(e, callback) {
    isCompositionRef.current = e.type !== 'compositionend';

    if (!isCompositionRef.current) {
      setCompositionValue(undefined);
      tryTriggerChangeCallback(e);
    }

    callback === null || callback === void 0 ? void 0 : callback(e);
  };

  var handleChange = function handleChange(e) {
    var newValue = e.target.value;

    if (!isCompositionRef.current) {
      if (compositionValue) {
        setCompositionValue(undefined);
      }

      tryTriggerChangeCallback(e);
    } else {
      isCompositionRef.current = false;
      setCompositionValue(newValue);
    }
  };

  var prefixCls = getPrefixCls('input', customizePrefixCls);

  _react["default"].useImperativeHandle(ref, function () {
    var _a;

    return {
      resizableTextArea: (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea,
      focus: function focus(option) {
        var _a, _b;

        (0, _Input.triggerFocus)((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
      },
      blur: function blur() {
        var _a;

        return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      }
    };
  });

  var textArea = /*#__PURE__*/_react["default"].createElement(_rcTextarea["default"], (0, _extends2["default"])({}, (0, _omit["default"])(props, ['allowClear']), {
    className: (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-borderless"), !bordered), (0, _defineProperty2["default"])(_classNames, className, className && !showCount), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-sm"), size === 'small' || customizeSize === 'small'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-lg"), size === 'large' || customizeSize === 'large'), _classNames), (0, _statusUtils.getStatusClassNames)(prefixCls, mergedStatus)),
    style: showCount ? undefined : style,
    prefixCls: prefixCls,
    maxLength: maxLength,
    onChange: handleChange,
    ref: innerRef,
    onCompositionStart: function onCompositionStart(e) {
      return handleComposition(e, _onCompositionStart);
    },
    onCompositionUpdate: function onCompositionUpdate(e) {
      return handleComposition(e, _onCompositionUpdate);
    },
    onCompositionEnd: function onCompositionEnd(e) {
      return handleComposition(e, _onCompositionEnd);
    }
  }));

  var val = (0, _Input.fixControlledValue)(compositionValue || value || ''); // TextArea

  var textareaNode = /*#__PURE__*/_react["default"].createElement(_ClearableLabeledInput["default"], (0, _extends2["default"])({}, props, {
    prefixCls: prefixCls,
    direction: direction,
    inputType: "text",
    value: val,
    element: textArea,
    handleReset: handleReset,
    ref: clearableInputRef,
    bordered: bordered,
    style: showCount ? undefined : style
  })); // Only show text area wrapper when needed


  if (showCount) {
    var valueLength = val.length;
    var dataCount = '';

    if ((0, _typeof2["default"])(showCount) === 'object') {
      dataCount = showCount.formatter({
        count: valueLength,
        maxLength: maxLength
      });
    } else {
      dataCount = "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : '');
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      hidden: hidden,
      className: (0, _classnames["default"])("".concat(prefixCls, "-textarea"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-textarea-rtl"), direction === 'rtl'), "".concat(prefixCls, "-textarea-show-count"), (0, _statusUtils.getStatusClassNames)("".concat(prefixCls, "-textarea"), mergedStatus, hasFeedback), className),
      style: style,
      "data-count": dataCount
    }, textareaNode, hasFeedback && /*#__PURE__*/_react["default"].createElement("span", {
      className: "".concat(prefixCls, "-textarea-suffix")
    }, feedbackIcon));
  }

  return textareaNode;
});

var _default = TextArea;
exports["default"] = _default;