"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _rcTabs = _interopRequireWildcard(require("@sensd/rc-tabs"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AddOutlined = _interopRequireDefault(require("@sensd/icons/AddOutlined"));

var _CloseOutlined = _interopRequireDefault(require("@sensd/icons/CloseOutlined"));

var _toArray = _interopRequireDefault(require("rc-util/lib/Children/toArray"));

var _DownFilled = _interopRequireDefault(require("@sensd/icons/DownFilled"));

var _devWarning = _interopRequireDefault(require("../_util/devWarning"));

var _configProvider = require("../config-provider");

var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _typography = _interopRequireDefault(require("../typography"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var getMoreIcon = function getMoreIcon(locale, prefixCls, type) {
  return function (dropdownVisible) {
    return /*#__PURE__*/React.createElement(_tooltip["default"], {
      title: dropdownVisible ? locale.collapseAll : locale.expandAll
    }, /*#__PURE__*/React.createElement("div", {
      className: (0, _classnames["default"])("".concat(prefixCls, "-more-icon"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-edit-card-more-icon"), type === 'editable-card'))
    }, type !== 'editable-card' && /*#__PURE__*/React.createElement("span", null, locale.all), /*#__PURE__*/React.createElement(_DownFilled["default"], {
      rotate: dropdownVisible ? 180 : 0
    })));
  };
};

function Tabs(_a) {
  var type = _a.type,
      className = _a.className,
      propSize = _a.size,
      _onEdit = _a.onEdit,
      hideAdd = _a.hideAdd,
      centered = _a.centered,
      addIcon = _a.addIcon,
      removeIcon = _a.removeIcon,
      _a$isSub = _a.isSub,
      isSub = _a$isSub === void 0 ? false : _a$isSub,
      _a$border = _a.border,
      border = _a$border === void 0 ? true : _a$border,
      maxTabWidth = _a.maxTabWidth,
      props = __rest(_a, ["type", "className", "size", "onEdit", "hideAdd", "centered", "addIcon", "removeIcon", "isSub", "border", "maxTabWidth"]);

  var customizePrefixCls = props.prefixCls,
      children = props.children;

  var _React$useContext = React.useContext(_configProvider.ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('tabs', customizePrefixCls);

  var getEditable = function getEditable(locale) {
    var editable;

    if (type === 'editable-card') {
      editable = {
        onEdit: function onEdit(editType, _ref) {
          var key = _ref.key,
              event = _ref.event;
          _onEdit === null || _onEdit === void 0 ? void 0 : _onEdit(editType === 'add' ? event : key, editType);
        },
        removeIcon: removeIcon || /*#__PURE__*/React.createElement(_tooltip["default"], {
          title: locale.deleteTab
        }, /*#__PURE__*/React.createElement(_CloseOutlined["default"], null)),
        addIcon: addIcon || /*#__PURE__*/React.createElement(_tooltip["default"], {
          title: locale.addTab
        }, /*#__PURE__*/React.createElement(_AddOutlined["default"], null)),
        showAdd: hideAdd !== true
      };
    }

    return editable;
  };

  var rootPrefixCls = getPrefixCls();
  var onlyOneTab = (0, _toArray["default"])(children).length === 1; // 每种 tab 的最大宽度限制， 需要自定义renderTabBar实现， 如果已经实现renderTabBar不能覆盖

  if (typeof props.renderTabBar === 'undefined') {
    props.renderTabBar = function (tabBarProps, DefaultTabBar) {
      return /*#__PURE__*/React.createElement(DefaultTabBar, tabBarProps, function (node) {
        var newChildren = React.Children.map(node.props.children, function (child) {
          if (child) {
            var chs = child.props.children;
            return /*#__PURE__*/React.cloneElement(child, {}, /*#__PURE__*/React.createElement("div", {
              className: "".concat(prefixCls, "-tab-btn-text"),
              style: {
                maxWidth: maxTabWidth
              }
            }, typeof chs === 'string' ? /*#__PURE__*/React.createElement(_typography["default"].Text, {
              className: "".concat(prefixCls, "-typography"),
              ellipsis: {
                tooltip: chs
              }
            }, chs) : chs));
          }
        });
        return React.cloneElement.apply(React, [node, {}].concat((0, _toConsumableArray2["default"])(newChildren)));
      });
    };
  }

  var moreDropdownItemRenderWrapper = function moreDropdownItemRenderWrapper(node) {
    return /*#__PURE__*/React.createElement(_typography["default"].Text, {
      className: (0, _classnames["default"])("".concat(prefixCls, "-typography"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-typography-remove"), type === 'editable-card')),
      ellipsis: {
        tooltip: node
      }
    }, node);
  };

  (0, _devWarning["default"])(!('onPrevClick' in props) && !('onNextClick' in props), 'Tabs', '`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.');
  (0, _devWarning["default"])(!(type === 'capsule' && (0, _toArray["default"])(children).length > 5), 'Tabs', 'The children of Tabs cannot larger than 5.');
  return /*#__PURE__*/React.createElement(_LocaleReceiver["default"], {
    componentName: "Tabs"
  }, function (locale) {
    return /*#__PURE__*/React.createElement(_SizeContext["default"].Consumer, null, function (contextSize) {
      var _classNames3;

      var size = propSize !== undefined ? propSize : contextSize;
      return /*#__PURE__*/React.createElement(_rcTabs["default"], (0, _extends2["default"])({
        direction: direction,
        moreTransitionName: "".concat(rootPrefixCls, "-slide-up"),
        moreIcon: getMoreIcon(locale, prefixCls, type),
        moreDropdownItemRenderWrapper: moreDropdownItemRenderWrapper,
        moreDropdownProps: {
          trigger: ['click'],
          overlayStyle: {
            width: '200px'
          }
        },
        boundaryOffset: 4
      }, props, {
        className: (0, _classnames["default"])((_classNames3 = {}, (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-").concat(size), size), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-card"), ['card', 'editable-card'].includes(type)), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-editable-card"), type === 'editable-card'), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-centered"), centered), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-capsule"), type === 'capsule'), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-sub"), (type === undefined || type === 'line') && isSub), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-card-border"), ['card', 'editable-card'].includes(type) && border), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-editable-card-onetab"), type === 'editable-card' && onlyOneTab), _classNames3), className),
        editable: getEditable(locale),
        prefixCls: prefixCls
      }));
    });
  });
}

Tabs.TabPane = _rcTabs.TabPane;
var _default = Tabs;
exports["default"] = _default;