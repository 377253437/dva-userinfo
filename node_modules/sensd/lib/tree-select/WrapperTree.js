"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _selectPanel = _interopRequireDefault(require("../select-panel"));

var _Empty = _interopRequireWildcard(require("../select-panel/Empty"));

var _Select = _interopRequireDefault(require("../select-panel/Select"));

var _button = _interopRequireDefault(require("../button"));

var _utils = require("./utils");

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _default2 = _interopRequireDefault(require("../locale/default"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var WrapperTree = function WrapperTree(props) {
  var tree = props.tree,
      prefixCls = props.prefixCls,
      treePrefixCls = props.treePrefixCls,
      _props$treeData = props.treeData,
      treeData = _props$treeData === void 0 ? [] : _props$treeData,
      _props$keyEntities = props.keyEntities,
      keyEntities = _props$keyEntities === void 0 ? {} : _props$keyEntities,
      statistics = props.statistics,
      showCheckAll = props.showCheckAll,
      multiple = props.multiple,
      noDataTitle = props.noDataTitle,
      noDataDesc = props.noDataDesc,
      noResultTitle = props.noResultTitle,
      noResultDesc = props.noResultDesc,
      value = props.value,
      setInnerValue = props.setInnerValue,
      showSearch = props.showSearch,
      defaultSearchValue = props.searchValue,
      onSearch = props.onSearch,
      filterTreeNode = props.filterTreeNode,
      treeCheckStrictly = props.treeCheckStrictly,
      fieldNames = props.fieldNames,
      treeNodeFilterProp = props.treeNodeFilterProp,
      showConfirm = props.showConfirm,
      labelInValue = props.labelInValue,
      dropdownOptLeft = props.dropdownOptLeft,
      dropdownSearchPlaceholder = props.dropdownSearchPlaceholder,
      toggleOpen = props.toggleOpen,
      onSelect = props.onSelect,
      triggerChange = props.triggerChange,
      resetValue = props.resetValue,
      selectAllText = props.selectAllText,
      cancelText = props.cancelText,
      okText = props.okText,
      treeNodeLabelProp = props.treeNodeLabelProp,
      autoClearSearchValue = props.autoClearSearchValue,
      filterSort = props.filterSort;

  var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      indeterminate = _React$useState2[0],
      setIndeterminate = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2["default"])(_React$useState3, 2),
      checkAll = _React$useState4[0],
      setCheckAll = _React$useState4[1];

  var _React$useState5 = React.useState([]),
      _React$useState6 = (0, _slicedToArray2["default"])(_React$useState5, 2),
      searchResult = _React$useState6[0],
      setSearchResult = _React$useState6[1];

  var _React$useState7 = React.useState(defaultSearchValue),
      _React$useState8 = (0, _slicedToArray2["default"])(_React$useState7, 2),
      searchValue = _React$useState8[0],
      setSearchValue = _React$useState8[1];

  var nodeValueList = React.useMemo(function () {
    if (multiple && treeCheckStrictly) {
      return Object.keys(keyEntities);
    }

    return Object.keys(keyEntities).filter(function (key) {
      return !keyEntities[key].children;
    }).map(function (key) {
      var node = keyEntities[key].node;
      return node[fieldNames.value];
    });
  }, [keyEntities, multiple, treeCheckStrictly]);
  var checkableList = React.useMemo(function () {
    return nodeValueList.filter(function (key) {
      return !keyEntities[key].node.disabled;
    });
  }, [nodeValueList]);
  var getLabel = React.useCallback(function (item) {
    if (item) {
      if (treeNodeLabelProp) {
        return item[treeNodeLabelProp];
      } // Loop from fieldNames


      var titleList = fieldNames._title;

      for (var i = 0; i < titleList.length; i += 1) {
        var title = item[titleList[i]];

        if (title !== undefined) {
          return title;
        }
      }
    }
  }, [fieldNames]);
  var filterTreeData = (0, _utils.useFilterTree2List)({
    treeData: treeData,
    fieldNames: fieldNames,
    getLabel: getLabel,
    highlightCls: "".concat(prefixCls, "-panel-word-important"),
    wrapperLabelCls: "".concat(treePrefixCls, "-search-split-item"),
    multiple: multiple,
    treeCheckStrictly: treeCheckStrictly,
    treeNodeFilterProp: treeNodeFilterProp,
    filterTreeNode: filterTreeNode
  });
  var getLabelList = React.useCallback(function (rawValue) {
    var formatValues = (0, _utils.toArray)(rawValue);
    return formatValues.map(function (val) {
      return getLabel(keyEntities[val].node);
    });
  }, [keyEntities]);

  var internalOnCheckAll = function internalOnCheckAll(e) {
    var checked = e.target.checked;
    var disabledSelectedValues = (value || []).filter(function (val) {
      var _a;

      return (_a = keyEntities[val]) === null || _a === void 0 ? void 0 : _a.node.disabled;
    });
    var newValue = checked ? [].concat((0, _toConsumableArray2["default"])(disabledSelectedValues), (0, _toConsumableArray2["default"])(checkableList)) : disabledSelectedValues;
    triggerChange(newValue, {
      selected: checked
    }, 'selection');
  };

  var onInternalSearch = function onInternalSearch(searchText) {
    setSearchValue(searchText);
    var result = filterTreeData(value, searchText);

    if (filterSort) {
      result = result.sort(filterSort);
    }

    setSearchResult(result);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);
  };

  var onInternalClickOption = function onInternalClickOption(val, checked) {
    onSelect(val, {
      selected: checked
    });

    if (!multiple) {
      toggleOpen(false);
    }

    if (autoClearSearchValue) {
      setSearchValue('');
    }
  };

  var onInternalOk = function onInternalOk() {
    setInnerValue({
      value: value,
      labelList: labelInValue ? null : getLabelList(value),
      extra: {
        preValue: (0, _utils.toLabeledValues)(value)
      },
      triggerChange: true
    });
    toggleOpen(false);
  };

  var onInternalCancel = function onInternalCancel() {
    resetValue();
    toggleOpen(false);
  };

  var _React$useMemo = React.useMemo(function () {
    return [/*#__PURE__*/React.createElement("div", {
      key: _Empty.EmptyType.noData,
      className: "".concat(prefixCls, "-nodata")
    }, /*#__PURE__*/React.createElement(_Empty["default"], {
      type: _Empty.EmptyType.noData,
      noDataTitle: noDataTitle,
      noDataDesc: noDataDesc
    })), /*#__PURE__*/React.createElement("div", {
      key: _Empty.EmptyType.noResult,
      className: "".concat(prefixCls, "-no-result")
    }, /*#__PURE__*/React.createElement(_Empty["default"], {
      type: _Empty.EmptyType.noResult,
      noResultTitle: noResultTitle,
      noResultDesc: noResultDesc
    }))];
  }, [noDataDesc]),
      _React$useMemo2 = (0, _slicedToArray2["default"])(_React$useMemo, 2),
      noDataComp = _React$useMemo2[0],
      noResultComp = _React$useMemo2[1];

  var customRightOpt = /*#__PURE__*/React.createElement(_LocaleReceiver["default"], {
    componentName: "Select",
    defaultLocale: _default2["default"].Select
  }, function (locale) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_button["default"], {
      style: {
        marginRight: 12
      },
      size: "small",
      onClick: onInternalCancel
    }, cancelText || locale.cancelText), /*#__PURE__*/React.createElement(_button["default"], {
      type: "primary",
      size: "small",
      onClick: onInternalOk
    }, okText || locale.okText));
  });
  React.useEffect(function () {
    var _a;

    if (multiple) {
      var checkedLength = (_a = value) === null || _a === void 0 ? void 0 : _a.length;
      setIndeterminate(!!checkedLength && checkedLength < nodeValueList.length);
      setCheckAll(checkedLength >= checkableList.length);
    }

    setSearchResult(filterTreeData(value, searchValue));
  }, [value, checkableList.length, nodeValueList.length, treeCheckStrictly, multiple]);
  return /*#__PURE__*/React.createElement(_selectPanel["default"], {
    showSearch: showSearch,
    query: searchValue,
    onSearch: onInternalSearch,
    indeterminate: indeterminate,
    showCheckAll: typeof showCheckAll === 'boolean' ? showCheckAll : false,
    checkAll: checkAll,
    onCheckAll: internalOnCheckAll,
    multiple: multiple,
    statistics: statistics,
    count: searchValue ? searchResult.length : nodeValueList.length,
    customContent: treeData.length === 0 ? noDataComp : undefined,
    noResult: searchValue && searchResult.length === 0 && noResultComp,
    customRightOpt: showConfirm ? customRightOpt : null,
    customLeftOpt: dropdownOptLeft,
    footer: showCheckAll || showConfirm || dropdownOptLeft,
    placeholder: dropdownSearchPlaceholder,
    selectAllText: selectAllText
  }, searchValue ? /*#__PURE__*/React.createElement(_Select["default"], {
    options: searchResult,
    queryString: searchValue,
    multiple: multiple,
    onClick: onInternalClickOption,
    value: value
  }) : tree);
};

var _default = WrapperTree;
exports["default"] = _default;