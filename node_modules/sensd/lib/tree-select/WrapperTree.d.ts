import * as React from 'react';
import type { BaseOptionType, DefaultOptionType, InternalFieldName, TreeSelectProps, OnInternalSelect, InternalTriggerChange } from '@sensd/rc-tree-select/lib/TreeSelect';
import type { DataEntity } from '@sensd/rc-tree/lib/interface';
import type { RawValue, InnerValueOptions } from './index';
declare type GetFuncType<T> = T extends boolean ? never : T;
declare type FilterFn = GetFuncType<TreeSelectProps['filterTreeNode']> | boolean;
interface WrapperTreeProps<ValueType = any, OptionType extends BaseOptionType | DefaultOptionType = BaseOptionType> {
    tree: React.ReactElement;
    prefixCls: string;
    treePrefixCls: string;
    treeData?: OptionType[];
    keyEntities?: Record<string, DataEntity>;
    statistics?: boolean | React.ReactNode;
    showCheckAll?: boolean;
    multiple?: boolean;
    noDataTitle?: React.ReactNode;
    noDataDesc?: React.ReactNode;
    noResultDesc?: React.ReactNode;
    noResultTitle?: React.ReactNode;
    value: ValueType;
    setInnerValue: (options: InnerValueOptions) => void;
    showConfirm?: boolean;
    labelInValue?: boolean;
    dropdownOptLeft?: React.ReactNode;
    dropdownSearchPlaceholder?: string;
    selectAllText?: string;
    cancelText?: string;
    okText?: string;
    treeNodeLabelProp?: string;
    autoClearSearchValue?: boolean;
    showSearch?: boolean;
    searchValue?: string;
    onSearch?: (value: string) => void;
    filterTreeNode?: FilterFn;
    filterSort?: (optionA: DefaultOptionType, optionB: DefaultOptionType) => number;
    treeCheckStrictly?: boolean;
    fieldNames: InternalFieldName;
    treeNodeFilterProp: string;
    toggleOpen: (open?: boolean) => void;
    onSelect: OnInternalSelect;
    triggerChange: InternalTriggerChange;
    resetValue: () => void;
}
declare const WrapperTree: <OptionType extends DefaultOptionType | BaseOptionType = BaseOptionType>(props: WrapperTreeProps<RawValue | RawValue[] | undefined, OptionType>) => JSX.Element;
export default WrapperTree;
