import * as React from 'react';
import { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, TreeSelectProps as RcTreeSelectProps } from '@sensd/rc-tree-select';
import type { BaseOptionType, DefaultOptionType, ChangeEventExtra } from '@sensd/rc-tree-select/lib/TreeSelect';
import type { BaseSelectRef } from '@sensd/rc-select';
import { TreeProps } from '../tree';
import { SizeType } from '../config-provider/SizeContext';
import type { InputStatus } from '../_util/statusUtils';
export declare type RawValue = string | number;
export interface LabeledValue {
    key?: string;
    value: RawValue;
    label: React.ReactNode;
}
export declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];
export interface InnerValueOptions {
    value: RawValue | RawValue[] | undefined;
    labelList?: string[] | null;
    extra?: ChangeEventExtra;
    triggerChange?: boolean;
}
export interface TreeSelectProps<ValueType = any, OptionType extends BaseOptionType | DefaultOptionType = DefaultOptionType> extends Omit<RcTreeSelectProps<ValueType, OptionType>, 'showTreeIcon' | 'treeMotion' | 'inputIcon' | 'mode' | 'getInputElement' | 'backfill' | 'treeLine'> {
    suffixIcon?: React.ReactNode;
    size?: SizeType;
    bordered?: boolean;
    treeLine?: TreeProps['showLine'];
    showConfirm?: boolean;
    showCheckAll?: boolean;
    statistics?: boolean | React.ReactNode;
    noDataTitle?: React.ReactNode;
    noDataDesc?: React.ReactNode;
    noResultDesc?: React.ReactNode;
    noResultTitle?: React.ReactNode;
    selectorSimpleMode?: boolean;
    dropdownOptLeft?: React.ReactNode;
    dropdownSearchPlaceholder?: string;
    selectorRender?: () => React.ReactElement;
    selectAllText?: string;
    cancelText?: string;
    okText?: string;
    prefixIcon?: React.ReactNode;
    status?: InputStatus;
    filterSort?: (optionA: OptionType, optionB: OptionType) => number;
}
declare const TreeSelectRef: <ValueType = any, OptionType extends DefaultOptionType | BaseOptionType = DefaultOptionType>(props: TreeSelectProps<ValueType, OptionType> & {
    children?: React.ReactNode;
} & {
    ref?: React.Ref<BaseSelectRef> | undefined;
}) => React.ReactElement;
declare type InternalTreeSelectType = typeof TreeSelectRef;
interface TreeSelectInterface extends InternalTreeSelectType {
    TreeNode: typeof TreeNode;
    SHOW_ALL: typeof SHOW_ALL;
    SHOW_PARENT: typeof SHOW_PARENT;
    SHOW_CHILD: typeof SHOW_CHILD;
}
declare const TreeSelect: TreeSelectInterface;
export { TreeNode };
export default TreeSelect;
