"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.toLabeledValues = toLabeledValues;
exports.useFilterTree2List = useFilterTree2List;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var React = _interopRequireWildcard(require("react"));

var _legacyUtil = require("@sensd/rc-tree-select/lib/utils/legacyUtil");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getSelectOptionByNode(_ref) {
  var nodeLabel = _ref.nodeLabel,
      nodeValue = _ref.nodeValue,
      nodeDisabled = _ref.nodeDisabled,
      nodeActive = _ref.nodeActive,
      searchValue = _ref.searchValue,
      highlightCls = _ref.highlightCls,
      wrapperLabelCls = _ref.wrapperLabelCls,
      _ref$parentNodeLabelL = _ref.parentNodeLabelList,
      parentNodeLabelList = _ref$parentNodeLabelL === void 0 ? [] : _ref$parentNodeLabelL;
  // 如果 nodeLabel 为 ReactNode，则无法做高亮分词
  var idx = typeof nodeLabel === 'string' ? nodeLabel.toUpperCase().indexOf(searchValue) : -1;
  var highlightLabel = idx > -1 ? /*#__PURE__*/React.createElement("span", {
    className: wrapperLabelCls
  }, nodeLabel.slice(0, idx), /*#__PURE__*/React.createElement("span", {
    className: highlightCls
  }, nodeLabel.slice(idx, idx + searchValue.length)), nodeLabel.slice(idx + searchValue.length)) : /*#__PURE__*/React.createElement("span", {
    className: wrapperLabelCls
  }, nodeLabel);
  var hightlightDetail = /*#__PURE__*/React.createElement(React.Fragment, null, parentNodeLabelList, parentNodeLabelList.length > 0 ? ' / ' : null, highlightLabel);
  return {
    label: highlightLabel,
    value: nodeValue,
    detail: hightlightDetail,
    disabled: nodeDisabled,
    active: nodeActive
  };
}

function toArray(value) {
  if (Array.isArray(value)) {
    return value;
  }

  return value !== undefined ? [value] : [];
}

function useFilterTree2List(_ref2) {
  var treeData = _ref2.treeData,
      fieldNames = _ref2.fieldNames,
      highlightCls = _ref2.highlightCls,
      wrapperLabelCls = _ref2.wrapperLabelCls,
      getLabel = _ref2.getLabel,
      multiple = _ref2.multiple,
      treeCheckStrictly = _ref2.treeCheckStrictly,
      treeNodeFilterProp = _ref2.treeNodeFilterProp,
      filterTreeNode = _ref2.filterTreeNode;
  return React.useCallback(function () {
    var internalValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var searchValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    if (!searchValue || filterTreeNode === false) {
      return [];
    }

    var upperStr = searchValue.toUpperCase();
    var filterOptionFunc;

    if (typeof filterTreeNode === 'function') {
      filterOptionFunc = filterTreeNode;
    } else {
      filterOptionFunc = function filterOptionFunc(_, dataNode) {
        var value = dataNode[treeNodeFilterProp];
        return String(value).toUpperCase().includes(upperStr);
      };
    }

    var supportEveryNode = multiple && treeCheckStrictly;
    var fieldChildren = fieldNames.children,
        fieldValue = fieldNames.value;
    var result = [];
    var keyValues = toArray(internalValue).map(function (item) {
      return (0, _typeof2["default"])(item) === 'object' ? item.value : item;
    });

    function dig(list) {
      var parentNodeLabelList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      list.forEach(function (dataNode) {
        var legalDataNode = (0, _legacyUtil.fillLegacyProps)(dataNode);
        var label = getLabel(legalDataNode);
        var match = filterOptionFunc === null || filterOptionFunc === void 0 ? void 0 : filterOptionFunc(searchValue, legalDataNode);
        var nodeChild = legalDataNode[fieldChildren];

        if (match && (supportEveryNode || !nodeChild)) {
          var nodeValue = dataNode[fieldValue];
          result.push(getSelectOptionByNode({
            nodeLabel: label,
            nodeValue: nodeValue,
            nodeDisabled: dataNode.disabled,
            nodeActive: keyValues.indexOf(nodeValue) > -1,
            searchValue: upperStr,
            highlightCls: highlightCls,
            wrapperLabelCls: wrapperLabelCls,
            parentNodeLabelList: parentNodeLabelList
          }));
        }

        if (nodeChild) {
          var wrapperLabel = /*#__PURE__*/React.createElement("span", {
            className: wrapperLabelCls
          }, label);
          dig(nodeChild, parentNodeLabelList.length > 0 ? [].concat((0, _toConsumableArray2["default"])(parentNodeLabelList), [' / ', wrapperLabel]) : [wrapperLabel]);
        }
      });
    }

    dig(treeData);
    return result;
  }, [treeData, fieldNames, highlightCls, wrapperLabelCls, multiple, treeCheckStrictly, treeNodeFilterProp, filterTreeNode]);
}

function toLabeledValues(value) {
  var formatValues = toArray(value);
  return formatValues.map(function (val) {
    return {
      value: val
    };
  });
}