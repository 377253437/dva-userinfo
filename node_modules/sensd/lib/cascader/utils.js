"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapChildrenByTypography = exports.joinNode = exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _react = _interopRequireDefault(require("react"));

var _typography = _interopRequireDefault(require("../typography"));

var SPLIT = ' / ';

var joinNode = function joinNode(nodeList) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SPLIT;

  if (nodeList.every(function (node) {
    return ['string', 'number'].includes((0, _typeof2["default"])(node));
  })) {
    return nodeList.join(split);
  }

  var mergedNodeList = nodeList.reduce(function (list, label, index) {
    var keyedLabel = /*#__PURE__*/_react["default"].isValidElement(label) ?
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react["default"].cloneElement(label, {
      key: index
    }) : label;

    if (index === 0) {
      return [keyedLabel];
    }

    return [].concat((0, _toConsumableArray2["default"])(list), [SPLIT, keyedLabel]);
  }, []);
  return mergedNodeList;
};

exports.joinNode = joinNode;

var wrapChildrenByTypography = function wrapChildrenByTypography(children, props) {
  var wrap = function wrap(content) {
    return /*#__PURE__*/_react["default"].createElement(_typography["default"].Text, {
      className: props === null || props === void 0 ? void 0 : props.className,
      ellipsis: {
        tooltip: true
      }
    }, content);
  };

  var wrapEnable = function wrapEnable(content) {
    return ['string', 'number'].includes((0, _typeof2["default"])(content));
  };

  if (wrapEnable(children)) {
    return wrap(children);
  }

  if (Array.isArray(children) && children.every(function (child) {
    return wrapEnable(child);
  })) {
    return wrap(children.join(''));
  }

  return children;
};

exports.wrapChildrenByTypography = wrapChildrenByTypography;
var _default = {
  joinNode: joinNode
};
exports["default"] = _default;