"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _selectPanel = _interopRequireDefault(require("../select-panel"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _default2 = _interopRequireDefault(require("../locale/default"));

var _Empty = _interopRequireWildcard(require("../select-panel/Empty"));

var _button = _interopRequireDefault(require("../button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CustomDropdown = function CustomDropdown(props) {
  var menu = props.menu,
      flattenOptions = props.flattenOptions,
      valueOptions = props.valueOptions,
      mergedOptions = props.options,
      rawValues = props.rawValues,
      multiple = props.multiple,
      noResultDesc = props.noResultDesc,
      noDataTitle = props.noDataTitle,
      noDataDesc = props.noDataDesc,
      noResultTitle = props.noResultTitle,
      prefixCls = props.prefixCls,
      searchValue = props.searchValue,
      onSearch = props.onSearch,
      onOK = props.onOK,
      onCheckAll = props.onCheckAll,
      showCheckAll = props.showCheckAll,
      showConfirm = props.showConfirm,
      onCancel = props.onCancel,
      _props$statistics = props.statistics,
      statistics = _props$statistics === void 0 ? true : _props$statistics,
      showSearch = props.showSearch,
      searchSuffix = props.searchSuffix,
      notFoundContent = props.notFoundContent,
      dropdownSearchPlaceholder = props.dropdownSearchPlaceholder,
      customLeftOpt = props.customLeftOpt,
      selectAllText = props.selectAllText,
      cancelText = props.cancelText,
      okText = props.okText; // 半选

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      indeterminate = _useState2[0],
      setIndeterminate = _useState2[1]; // 全选


  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      checkAll = _useState4[0],
      setCheckAll = _useState4[1];

  var onCheckboxChange = function onCheckboxChange() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var disabledSelectedValues = value.filter(function (val) {
      var opt = valueOptions.get(val);
      return opt === null || opt === void 0 ? void 0 : opt.disabled;
    });
    var data = mergedOptions.filter(function (item) {
      return !item.disabled;
    }).map(function (item) {
      return item.value;
    });
    return {
      filteredValues: [].concat((0, _toConsumableArray2["default"])(disabledSelectedValues), (0, _toConsumableArray2["default"])(data)),
      disabledSelectedValues: disabledSelectedValues
    };
  };

  var handleCheckAll = function handleCheckAll(e) {
    var checked = e.target.checked;
    setCheckAll(checked);

    var _onCheckboxChange = onCheckboxChange((0, _toConsumableArray2["default"])(rawValues)),
        filteredValues = _onCheckboxChange.filteredValues,
        disabledSelectedValues = _onCheckboxChange.disabledSelectedValues;

    var values = checked ? filteredValues : disabledSelectedValues;
    onCheckAll === null || onCheckAll === void 0 ? void 0 : onCheckAll(values);
  };

  (0, _react.useEffect)(function () {
    if (multiple) {
      var size = rawValues.size; // 半选

      setIndeterminate(!!size && size < mergedOptions.length); // 全选

      var _onCheckboxChange2 = onCheckboxChange((0, _toConsumableArray2["default"])(rawValues)),
          filteredValues = _onCheckboxChange2.filteredValues;

      setCheckAll(size === filteredValues.length);
    }
  }, [rawValues, mergedOptions]);

  var _useMemo = (0, _react.useMemo)(function () {
    return [/*#__PURE__*/_react["default"].createElement("div", {
      key: _Empty.EmptyType.noData,
      className: "".concat(prefixCls, "-nodata")
    }, /*#__PURE__*/_react["default"].createElement(_Empty["default"], {
      type: _Empty.EmptyType.noData,
      noDataTitle: noDataTitle,
      noDataDesc: noDataDesc
    })), /*#__PURE__*/_react["default"].createElement("div", {
      key: _Empty.EmptyType.noResult,
      className: "".concat(prefixCls, "-no-result")
    }, /*#__PURE__*/_react["default"].createElement(_Empty["default"], {
      type: _Empty.EmptyType.noResult,
      noResultTitle: noResultTitle,
      noResultDesc: noResultDesc
    }))];
  }, [noDataDesc]),
      _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 2),
      noDataComp = _useMemo2[0],
      noResultComp = _useMemo2[1];

  var count = flattenOptions.length;

  var handleOk = function handleOk() {
    var values = (0, _toConsumableArray2["default"])(rawValues);

    if (multiple) {
      onOK === null || onOK === void 0 ? void 0 : onOK(values, values.map(function (item) {
        return valueOptions.get(item);
      }));
      return;
    }

    var singleVal = values[0];
    onOK === null || onOK === void 0 ? void 0 : onOK(singleVal, valueOptions.get(singleVal));
  };

  var customRightOpt = /*#__PURE__*/_react["default"].createElement(_LocaleReceiver["default"], {
    componentName: "Select",
    defaultLocale: _default2["default"].Select
  }, function (locale) {
    return showConfirm && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_button["default"], {
      style: {
        marginRight: 12
      },
      size: "small",
      onClick: onCancel
    }, cancelText || locale.cancelText), /*#__PURE__*/_react["default"].createElement(_button["default"], {
      type: "primary",
      size: "small",
      onClick: handleOk
    }, okText || locale.okText));
  });

  var hasFooter = showCheckAll || showConfirm || customLeftOpt; // 如果是单选，只显示checkbox，则不展示 footer

  if (!multiple && showCheckAll && !showConfirm) {
    hasFooter = false;
  }

  var customContent = notFoundContent !== undefined ? notFoundContent : noDataComp;

  if ((mergedOptions === null || mergedOptions === void 0 ? void 0 : mergedOptions.length) > 0) {
    customContent = undefined;
  }

  return /*#__PURE__*/_react["default"].createElement(_selectPanel["default"], {
    query: searchValue,
    count: count,
    onSearch: onSearch,
    indeterminate: indeterminate,
    checkAll: checkAll,
    onCheckAll: handleCheckAll,
    showCheckAll: showCheckAll,
    footer: hasFooter,
    statistics: statistics,
    multiple: multiple,
    customContent: customContent,
    noResult: searchValue && count === 0 && noResultComp,
    customRightOpt: customRightOpt,
    showSearch: showSearch,
    searchSuffix: searchSuffix,
    placeholder: dropdownSearchPlaceholder,
    customLeftOpt: customLeftOpt,
    selectAllText: selectAllText
  }, menu);
};

var _default = CustomDropdown;
exports["default"] = _default;