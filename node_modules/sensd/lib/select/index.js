"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _omit = _interopRequireDefault(require("rc-util/lib/omit"));

var _classnames = _interopRequireDefault(require("classnames"));

var _rcSelect = _interopRequireWildcard(require("@sensd/rc-select"));

var _useMergedState5 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _configProvider = require("../config-provider");

var _iconUtil = _interopRequireDefault(require("./utils/iconUtil"));

var _SizeContext = _interopRequireDefault(require("../config-provider/SizeContext"));

var _context = require("../form/context");

var _motion = require("../_util/motion");

var _statusUtils = require("../_util/statusUtils");

var _CustomerSelector = _interopRequireDefault(require("./CustomerSelector"));

var _CustomDropdown = _interopRequireDefault(require("./CustomDropdown"));

var _option = _interopRequireDefault(require("./option"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// TODO: 4.0 - codemod should help to change `filterOption` to support node props.
var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var SECRET_COMBOBOX_MODE_DO_NOT_USE = 'SECRET_COMBOBOX_MODE_DO_NOT_USE';

var InternalSelect = function InternalSelect(_a, ref) {
  var _classNames, _classNames2;

  var customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      className = _a.className,
      getPopupContainer = _a.getPopupContainer,
      dropdownClassName = _a.dropdownClassName,
      _a$listHeight = _a.listHeight,
      listHeight = _a$listHeight === void 0 ? 358 : _a$listHeight,
      _a$listItemHeight = _a.listItemHeight,
      listItemHeight = _a$listItemHeight === void 0 ? 34 : _a$listItemHeight,
      customizeSize = _a.size,
      notFoundContent = _a.notFoundContent,
      showCheckAll = _a.showCheckAll,
      selectorSimpleMode = _a.selectorSimpleMode,
      _a$groupType = _a.groupType,
      groupType = _a$groupType === void 0 ? 'box' : _a$groupType,
      statistics = _a.statistics,
      showConfirm = _a.showConfirm,
      dropdownRender = _a.dropdownRender,
      showDropdownSearch = _a.showDropdownSearch,
      dropdownSearchSuffix = _a.dropdownSearchSuffix,
      noDataDesc = _a.noDataDesc,
      noDataTitle = _a.noDataTitle,
      noResultDesc = _a.noResultDesc,
      noResultTitle = _a.noResultTitle,
      selectorRender = _a.selectorRender,
      propsSearchValue = _a.searchValue,
      dropdownSearchPlaceholder = _a.dropdownSearchPlaceholder,
      dropdownOptLeft = _a.dropdownOptLeft,
      selectAllText = _a.selectAllText,
      cancelText = _a.cancelText,
      okText = _a.okText,
      prefixIcon = _a.prefixIcon,
      onSearch = _a.onSearch,
      onCancel = _a.onCancel,
      onDropdownVisibleChange = _a.onDropdownVisibleChange,
      propsOpen = _a.open,
      propsDefaultOpen = _a.defaultOpen,
      customStatus = _a.status,
      _a$showArrow = _a.showArrow,
      showArrow = _a$showArrow === void 0 ? true : _a$showArrow,
      props = __rest(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "listHeight", "listItemHeight", "size", "notFoundContent", "showCheckAll", "selectorSimpleMode", "groupType", "statistics", "showConfirm", "dropdownRender", "showDropdownSearch", "dropdownSearchSuffix", "noDataDesc", "noDataTitle", "noResultDesc", "noResultTitle", "selectorRender", "searchValue", "dropdownSearchPlaceholder", "dropdownOptLeft", "selectAllText", "cancelText", "okText", "prefixIcon", "onSearch", "onCancel", "onDropdownVisibleChange", "open", "defaultOpen", "status", "showArrow"]);

  var _React$useContext = _react["default"].useContext(_configProvider.ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

  var size = _react["default"].useContext(_SizeContext["default"]);

  var selectRef = (0, _react.useRef)(null);
  var defaultValue = props.defaultValue,
      propsValue = props.value,
      onChange = props.onChange,
      disabled = props.disabled,
      optionLabelProp = props.optionLabelProp,
      labelInValue = props.labelInValue,
      placeholder = props.placeholder,
      tagRender = props.tagRender; // =========================== Query ===========================

  var _useMergedState = (0, _useMergedState5["default"])(propsSearchValue, {
    value: propsSearchValue
  }),
      _useMergedState2 = (0, _slicedToArray2["default"])(_useMergedState, 2),
      searchValue = _useMergedState2[0],
      setSearchValue = _useMergedState2[1]; // =========================== Selector Value ===========================


  var _useMergedState3 = (0, _useMergedState5["default"])(defaultValue, {
    value: propsValue
  }),
      _useMergedState4 = (0, _slicedToArray2["default"])(_useMergedState3, 2),
      selectorValue = _useMergedState4[0],
      setSelectorValue = _useMergedState4[1]; // =========================== Panel Value ===========================


  var _useState = (0, _react.useState)(selectorValue),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      panelValue = _useState2[0],
      setPanelValue = _useState2[1];

  (0, _react.useEffect)(function () {
    setPanelValue(selectorValue);
  }, [selectorValue]);
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var rootPrefixCls = getPrefixCls();

  var mode = _react["default"].useMemo(function () {
    var m = props.mode;

    if (m === 'combobox') {
      return undefined;
    }

    if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
      return 'combobox';
    }

    return m;
  }, [props.mode]);

  var isMultiple = mode === 'multiple' || mode === 'tags';
  var mergedShowArrow = showArrow !== undefined ? showArrow : props.loading; // ===================== Form Status =====================

  var _React$useContext2 = _react["default"].useContext(_context.FormItemInputContext),
      contextStatus = _React$useContext2.status,
      hasFeedback = _React$useContext2.hasFeedback,
      feedbackIcon = _React$useContext2.feedbackIcon;

  var mergedStatus = (0, _statusUtils.getMergedStatus)(contextStatus, customStatus); // ===================== Empty =====================

  var mergedNotFound;

  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else if (mode === 'combobox') {
    mergedNotFound = null;
  }

  var _useState3 = (0, _react.useState)(propsOpen || propsDefaultOpen),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      open = _useState4[0],
      setOpen = _useState4[1];

  (0, _react.useEffect)(function () {
    setOpen(propsOpen);
  }, [propsOpen]); // ===================== Icons =====================

  var _getIcons = (0, _iconUtil["default"])((0, _extends2["default"])((0, _extends2["default"])({}, props), {
    multiple: isMultiple,
    hasFeedback: hasFeedback,
    feedbackIcon: feedbackIcon,
    showArrow: mergedShowArrow,
    prefixCls: prefixCls,
    dropDownVisible: open
  })),
      suffixIcon = _getIcons.suffixIcon,
      itemIcon = _getIcons.itemIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon;

  var selectProps = (0, _omit["default"])(props, ['suffixIcon', 'itemIcon']);
  var rcSelectRtlDropDownClassName = (0, _classnames["default"])(dropdownClassName, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-dropdown-").concat(direction), direction === 'rtl'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-dropdown-wrapper"), true), _classNames));
  var mergedSize = customizeSize || size;
  var mergedClassName = (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === 'large'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === 'small'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-simple"), selectorSimpleMode && isMultiple), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-tags"), mode === 'tags'), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-custom"), tagRender && !(panelValue === null || panelValue === void 0 ? void 0 : panelValue.length)), _classNames2), (0, _statusUtils.getStatusClassNames)(prefixCls, mergedStatus, hasFeedback), className);

  var handleChange = function handleChange(value, option) {
    setPanelValue(value);

    if (!showConfirm) {
      setSelectorValue(value);
      onChange === null || onChange === void 0 ? void 0 : onChange(value, option);
    }
  };

  var handleOk = function handleOk(value, option) {
    setPanelValue(value);
    setSelectorValue(value);
    onChange === null || onChange === void 0 ? void 0 : onChange(value, option); // 外部有 open 控制，采用外部的

    if (propsOpen === undefined) {
      setOpen(false);
    } else {
      onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(false);
    }
  };

  var handleCancel = function handleCancel() {
    // 外部有 open 控制，采用外部的
    if (propsOpen === undefined) {
      setOpen(false);
    } else {
      onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(false);
    }

    onCancel === null || onCancel === void 0 ? void 0 : onCancel();
  };

  var handleClose = function handleClose(value, option) {
    if (Array.isArray(selectorValue) && Array.isArray(panelValue)) {
      var changedValues = selectorValue.filter(function (val) {
        return val !== value;
      });
      setSelectorValue(changedValues);
      setPanelValue(panelValue.filter(function (val) {
        return val !== value;
      }));
      onChange === null || onChange === void 0 ? void 0 : onChange(changedValues, option);
    }
  };

  var customerSelector = function customerSelector(selectorProps) {
    return /*#__PURE__*/_react["default"].createElement(_CustomerSelector["default"], (0, _extends2["default"])({}, selectorProps, {
      value: selectorValue,
      selectorSimpleMode: selectorSimpleMode,
      onClose: handleClose,
      disabled: disabled,
      optionLabelProp: optionLabelProp,
      labelInValue: labelInValue,
      prefixIcon: prefixIcon,
      placeholder: placeholder
    }));
  };

  var handleSearch = function handleSearch(value) {
    setSearchValue(value);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value);
  };

  var optionRender = function optionRender(menu, selectContext) {
    var dropdownElement = /*#__PURE__*/_react["default"].createElement(_CustomDropdown["default"], (0, _extends2["default"])({
      menu: menu
    }, selectContext, {
      multiple: isMultiple,
      noDataDesc: noDataDesc,
      noDataTitle: noDataTitle,
      noResultDesc: noResultDesc,
      noResultTitle: noResultTitle,
      prefixCls: prefixCls,
      onSearch: handleSearch,
      searchValue: searchValue,
      onOK: handleOk,
      showCheckAll: showCheckAll,
      onCheckAll: setPanelValue,
      onCancel: handleCancel,
      statistics: statistics,
      showSearch: showDropdownSearch,
      searchSuffix: dropdownSearchSuffix,
      showConfirm: showConfirm,
      notFoundContent: mergedNotFound,
      dropdownSearchPlaceholder: dropdownSearchPlaceholder,
      customLeftOpt: dropdownOptLeft,
      selectAllText: selectAllText,
      cancelText: cancelText,
      okText: okText
    }));

    return (dropdownRender === null || dropdownRender === void 0 ? void 0 : dropdownRender(dropdownElement)) || dropdownElement;
  };

  var renderOption = function renderOption(data) {
    var checked = false;

    if (isMultiple && Array.isArray(panelValue)) {
      if (labelInValue) {
        checked = panelValue === null || panelValue === void 0 ? void 0 : panelValue.find(function (item) {
          return item.value === data.value;
        });
      } else {
        checked = panelValue === null || panelValue === void 0 ? void 0 : panelValue.includes(data.value);
      }
    }

    return /*#__PURE__*/_react["default"].createElement(_option["default"], (0, _extends2["default"])({
      key: data.value || data.label
    }, data, {
      checked: checked,
      multiple: isMultiple,
      searchValue: searchValue
    }));
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _extends2["default"])({
      toggleOpen: setOpen
    }, selectRef.current);
  });

  var handleVisibleChange = function handleVisibleChange(visible) {
    // 如果外部传入了 open，则内部不控制
    if (propsOpen === undefined) {
      setOpen(visible);
    }

    if (visible) {
      setTimeout(function () {
        var _a;

        (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.scrollTo(0);
      }, 50); // 每次打开下拉菜单时，重置面板选中数据

      setPanelValue(selectorValue);
    }

    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(visible);
  };

  return /*#__PURE__*/_react["default"].createElement(_rcSelect["default"], (0, _extends2["default"])({
    ref: selectRef,
    customerSelector: customerSelector,
    optionRender: optionRender // dropdown
    ,
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth,
    showArrow: true
  }, selectProps, {
    open: open,
    value: panelValue,
    onChange: handleChange,
    searchValue: searchValue,
    customOption: renderOption,
    transitionName: (0, _motion.getTransitionName)(rootPrefixCls, 'slide-up', props.transitionName),
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    mode: mode,
    prefixCls: prefixCls,
    direction: direction,
    inputIcon: suffixIcon,
    menuItemSelectedIcon: itemIcon,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    className: mergedClassName,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    dropdownClassName: rcSelectRtlDropDownClassName,
    dropdownAutoClose: showConfirm,
    groupType: groupType,
    getRawInputElement: selectorRender,
    onDropdownVisibleChange: handleVisibleChange
  }));
};

var Select = /*#__PURE__*/_react["default"].forwardRef(InternalSelect);

Select.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
Select.Option = _rcSelect.Option;
Select.OptGroup = _rcSelect.OptGroup;
var _default = Select;
exports["default"] = _default;