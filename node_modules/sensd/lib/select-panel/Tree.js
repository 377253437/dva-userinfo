"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _treeUtil = require("@sensd/rc-tree/lib/utils/treeUtil");

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _SelectPanel = _interopRequireDefault(require("./SelectPanel"));

var _tree = _interopRequireDefault(require("../tree"));

var _configProvider = require("../config-provider");

var _Select = _interopRequireDefault(require("./Select"));

var _Empty = _interopRequireWildcard(require("./Empty"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var fillLegacyProps = function fillLegacyProps(dataNode) {
  if (!dataNode) {
    return dataNode;
  }

  var cloneNode = (0, _extends2["default"])({}, dataNode);

  if (!('props' in cloneNode)) {
    Object.defineProperty(cloneNode, 'props', {
      get: function get() {
        return cloneNode;
      }
    });
  }

  return cloneNode;
}; // 处理treeData 节点添加disable


var fillTreeNode = function fillTreeNode(treeData, val, mergedFiledNames) {
  var initData = JSON.parse(JSON.stringify(treeData));

  var initTreeData = function initTreeData(data, keys) {
    data === null || data === void 0 ? void 0 : data.forEach(function (item) {
      // @ts-ignore
      if (!keys.includes(item[mergedFiledNames.key])) {
        item.disabled = true;
      } // @ts-ignore


      if (item[mergedFiledNames.children]) {
        // @ts-ignore
        initTreeData(item[mergedFiledNames.children], keys);
      }
    });
    return data;
  };

  var newTreeData = initTreeData(initData, val);
  return newTreeData;
};

var InternalTree = function InternalTree(props, ref) {
  var customizePrefixCls = props.prefixCls,
      searchValue = props.searchValue,
      footer = props.footer,
      statistics = props.statistics,
      multiple = props.multiple,
      treeData = props.treeData,
      defaultValue = props.defaultValue,
      propsValue = props.value,
      fieldNames = props.fieldNames,
      onChange = props.onChange,
      checkStrictly = props.checkStrictly,
      noDataTitle = props.noDataTitle,
      noDataDesc = props.noDataDesc,
      noResultTitle = props.noResultTitle,
      noResultDesc = props.noResultDesc,
      maxCount = props.maxCount,
      listHeight = props.listHeight,
      showSearch = props.showSearch,
      selectAllText = props.selectAllText,
      others = __rest(props, ["prefixCls", "searchValue", "footer", "statistics", "multiple", "treeData", "defaultValue", "value", "fieldNames", "onChange", "checkStrictly", "noDataTitle", "noDataDesc", "noResultTitle", "noResultDesc", "maxCount", "listHeight", "showSearch", "selectAllText"]);

  var _useContext = (0, _react.useContext)(_configProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('select-panel', customizePrefixCls);
  var mergedFiledNames = (0, _treeUtil.fillFieldNames)(fieldNames); // =========================== Values ===========================

  var _useMergedState = (0, _useMergedState3["default"])(defaultValue, {
    value: propsValue
  }),
      _useMergedState2 = (0, _slicedToArray2["default"])(_useMergedState, 2),
      internalValue = _useMergedState2[0],
      setInternalValue = _useMergedState2[1];

  var _useState = (0, _react.useState)(treeData || []),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      transTreeData = _useState2[0],
      setTransTreeData = _useState2[1]; // 搜索


  var _useState3 = (0, _react.useState)(searchValue || ''),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      query = _useState4[0],
      setQuery = _useState4[1];

  (0, _react.useEffect)(function () {
    setQuery(searchValue || '');
  }, [searchValue]);
  (0, _react.useEffect)(function () {
    setTransTreeData(treeData);
  }, [treeData]);
  var treeRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return treeRef.current;
  }); // 半选

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      indeterminate = _useState6[0],
      setIndeterminate = _useState6[1]; // 全选


  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      checkAll = _useState8[0],
      setCheckAll = _useState8[1]; // Tree


  var entities = (0, _react.useMemo)(function () {
    var _convertDataToEntitie = (0, _treeUtil.convertDataToEntities)(treeData, {
      fieldNames: fieldNames
    }),
        keyEntities = _convertDataToEntitie.keyEntities; // tree 叶子节点集合


    var filterKeyEntities = {};
    Object.keys(keyEntities).forEach(function (item) {
      var _a;

      if (!((_a = keyEntities[item]) === null || _a === void 0 ? void 0 : _a.children)) {
        filterKeyEntities[item] = keyEntities[item];
      }
    });
    return {
      keyEntities: keyEntities,
      filterKeyEntities: filterKeyEntities
    };
  }, [fieldNames, treeData]);

  var onCheckboxChange = function onCheckboxChange() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var keyEntities = entities.keyEntities,
        filterKeyEntities = entities.filterKeyEntities;
    var disabledSelectedValues = value.filter(function (val) {
      var _a;

      return (_a = keyEntities[val]) === null || _a === void 0 ? void 0 : _a.node.disabled;
    });
    var data = Object.keys(filterKeyEntities).filter(function (item) {
      var _a;

      return !((_a = keyEntities[item]) === null || _a === void 0 ? void 0 : _a.node.disabled);
    });

    if (maxCount !== undefined) {
      if (maxCount > disabledSelectedValues.length) {
        var enableValue = value.filter(function (val) {
          var _a;

          return !((_a = keyEntities[val]) === null || _a === void 0 ? void 0 : _a.node.disabled);
        });
        var filterData = Array.from(new Set([].concat((0, _toConsumableArray2["default"])(data), (0, _toConsumableArray2["default"])(enableValue))));
        var dataLength = maxCount - disabledSelectedValues.length - enableValue.length;
        data = dataLength > 0 ? filterData.slice(0, dataLength).concat(enableValue) : [];
      } else {
        data = [];
      }
    } // [已选择的数据，禁用数据，全部数据]。去重，就得到了已选择的数据+从上到下的顺序排序


    var filteredValues = new Set([].concat((0, _toConsumableArray2["default"])(value), (0, _toConsumableArray2["default"])(disabledSelectedValues), (0, _toConsumableArray2["default"])(data)));
    return {
      filteredValues: Array.from(filteredValues),
      disabledSelectedValues: disabledSelectedValues
    };
  };

  var handleCheckAll = function handleCheckAll(e) {
    var keyEntities = entities.keyEntities;
    var checked = e.target.checked;
    setCheckAll(checked);

    var _onCheckboxChange = onCheckboxChange(internalValue),
        filteredValues = _onCheckboxChange.filteredValues,
        disabledSelectedValues = _onCheckboxChange.disabledSelectedValues;

    var values = checked ? filteredValues : disabledSelectedValues;

    if (maxCount !== undefined) {
      setTransTreeData(checked ? fillTreeNode(treeData, values, mergedFiledNames) : treeData);
    }

    setInternalValue(values);
    onChange === null || onChange === void 0 ? void 0 : onChange(values, values.map(function (val) {
      return keyEntities[val].node;
    }));
  };

  var onInternalSelect = function onInternalSelect(keys, info) {
    var keyEntities = entities.keyEntities;
    var node = info.node;
    var selectedValue = node.key;
    var filterKeys = (0, _toConsumableArray2["default"])(keys);

    if (multiple) {
      if (maxCount !== undefined && keys.length >= maxCount) {
        filterKeys = keys.slice(0, maxCount);
        setTransTreeData(fillTreeNode(treeData, filterKeys, mergedFiledNames));
        setInternalValue(filterKeys);
      } else {
        setInternalValue(filterKeys);
        setTransTreeData(treeData);
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(filterKeys, filterKeys.map(function (val) {
        return keyEntities[val].node;
      }));
    } else {
      setInternalValue(selectedValue);
      onChange === null || onChange === void 0 ? void 0 : onChange(selectedValue, node);
    }
  }; // 高亮后的 option


  var getResultOption = function getResultOption(key, indexOf, path) {
    var beforeStr = key.substr(0, indexOf);
    var afterStr = key.substr(indexOf + query.length);

    var label = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, beforeStr, /*#__PURE__*/_react["default"].createElement("span", {
      className: (0, _classnames["default"])("".concat(prefixCls, "-word-important"))
    }, query), afterStr);

    var resultString = '';
    path.forEach(function (arr) {
      resultString += "".concat(arr, "/");
    });

    var detail = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, resultString, beforeStr, /*#__PURE__*/_react["default"].createElement("span", {
      className: (0, _classnames["default"])("".concat(prefixCls, "-word-important"))
    }, query), afterStr);

    return {
      label: label,
      detail: detail
    };
  };

  var searchResult = []; // 搜索时筛选节点

  var onSearch = function onSearch(data, parent) {
    data === null || data === void 0 ? void 0 : data.forEach(function (item) {
      var _a;

      var result = fillLegacyProps(item);
      var indexOf = (_a = result[mergedFiledNames.title]) === null || _a === void 0 ? void 0 : _a.indexOf(query);
      var tmp = [].concat((0, _toConsumableArray2["default"])(parent), [result[mergedFiledNames.title]]); // 无包含关系

      if (multiple && checkStrictly && indexOf > -1) {
        var obj = getResultOption(result[mergedFiledNames.title], indexOf, parent);
        searchResult.push((0, _extends2["default"])((0, _extends2["default"])({}, obj), {
          key: result[mergedFiledNames.key],
          value: result[mergedFiledNames.key],
          disabled: result.disabled
        }));
      }

      if (result[mergedFiledNames.children]) {
        onSearch(result[mergedFiledNames.children], tmp);
      } else if ((!multiple || !checkStrictly) && indexOf > -1) {
        // 有包含关系
        var _obj = getResultOption(result[mergedFiledNames.title], indexOf, parent);

        searchResult.push((0, _extends2["default"])((0, _extends2["default"])({}, _obj), {
          key: result[mergedFiledNames.key],
          value: result[mergedFiledNames.key],
          disabled: result.disabled
        }));
      }
    });
  };

  var options = (0, _react.useMemo)(function () {
    onSearch(treeData, []);
    return searchResult;
  }, [query, treeData]);

  var handleClickOption = function handleClickOption(value, checked) {
    var keyEntities = entities.keyEntities;

    if (multiple) {
      var preValue = internalValue || [];
      var newRawValues = checked ? [].concat((0, _toConsumableArray2["default"])(preValue), [value]) : preValue.filter(function (v) {
        return v !== value;
      });
      setInternalValue(newRawValues);
      onChange === null || onChange === void 0 ? void 0 : onChange(newRawValues, newRawValues.map(function (val) {
        return keyEntities[val].node;
      }));
    } else if (value !== internalValue) {
      setInternalValue(value);
      onChange === null || onChange === void 0 ? void 0 : onChange(value, [keyEntities[value].node]);
    }
  }; // 叶子节点总数


  var count = query ? options.length : Object.keys(entities.filterKeyEntities).length;
  (0, _react.useEffect)(function () {
    if (multiple) {
      var _onCheckboxChange2 = onCheckboxChange(internalValue),
          filteredValues = _onCheckboxChange2.filteredValues; // 半选


      setIndeterminate(!!(internalValue === null || internalValue === void 0 ? void 0 : internalValue.length) && (internalValue === null || internalValue === void 0 ? void 0 : internalValue.length) < filteredValues.length); // 全选

      setCheckAll((internalValue === null || internalValue === void 0 ? void 0 : internalValue.length) >= filteredValues.length);
    }

    if (maxCount !== undefined && internalValue.length >= maxCount) {
      setTransTreeData(fillTreeNode(treeData, internalValue, mergedFiledNames));
    } else {
      setTransTreeData(treeData);
    }
  }, [internalValue, entities.keyEntities]);

  var _useMemo = (0, _react.useMemo)(function () {
    return [/*#__PURE__*/_react["default"].createElement("div", {
      key: _Empty.EmptyType.noData,
      className: "".concat(prefixCls, "-nodata")
    }, /*#__PURE__*/_react["default"].createElement(_Empty["default"], {
      type: _Empty.EmptyType.noData,
      noDataTitle: noDataTitle,
      noDataDesc: noDataDesc
    })), /*#__PURE__*/_react["default"].createElement("div", {
      key: _Empty.EmptyType.noResult,
      className: "".concat(prefixCls, "-no-result")
    }, /*#__PURE__*/_react["default"].createElement(_Empty["default"], {
      type: _Empty.EmptyType.noResult,
      noResultTitle: noResultTitle,
      noResultDesc: noResultDesc
    }))];
  }, [noDataDesc]),
      _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 2),
      noDataComp = _useMemo2[0],
      noResultComp = _useMemo2[1];

  return /*#__PURE__*/_react["default"].createElement(_SelectPanel["default"], {
    query: query,
    count: count,
    onSearch: setQuery,
    indeterminate: indeterminate,
    checkAll: checkAll,
    onCheckAll: handleCheckAll,
    footer: footer,
    statistics: statistics,
    multiple: multiple,
    customContent: (!treeData || (treeData === null || treeData === void 0 ? void 0 : treeData.length) === 0) && noDataComp,
    noResult: query && count === 0 && noResultComp,
    contentStyle: {
      minHeight: listHeight
    },
    showSearch: showSearch,
    selectAllText: selectAllText
  }, query ? /*#__PURE__*/_react["default"].createElement(_Select["default"], {
    options: options,
    queryString: query,
    multiple: multiple,
    onClick: handleClickOption,
    value: internalValue,
    maxCount: maxCount,
    listHeight: listHeight
  }) : /*#__PURE__*/_react["default"].createElement(_tree["default"], (0, _extends2["default"])({
    ref: treeRef,
    multiple: multiple,
    treeData: transTreeData // @ts-ignore
    ,
    onCheck: onInternalSelect,
    checkedKeys: internalValue,
    defaultExpandAll: true,
    checkable: multiple,
    height: listHeight,
    fieldNames: fieldNames,
    checkStrictly: checkStrictly
  }, others)));
};

var _default = /*#__PURE__*/_react["default"].forwardRef(InternalTree);

exports["default"] = _default;