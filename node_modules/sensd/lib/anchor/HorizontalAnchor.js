"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _TabNavList = _interopRequireDefault(require("@sensd/rc-tabs/lib/TabNavList"));

var _TabContext = _interopRequireDefault(require("@sensd/rc-tabs/lib/TabContext"));

var _toArray = _interopRequireDefault(require("rc-util/lib/Children/toArray"));

var _DownFilled = _interopRequireDefault(require("@sensd/icons/DownFilled"));

var _context = _interopRequireDefault(require("./context"));

var _configProvider = require("../config-provider");

var _devWarning = _interopRequireDefault(require("../_util/devWarning"));

var _typography = _interopRequireDefault(require("../typography"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function parseTabList(children) {
  var flattenArr = (0, _toArray["default"])(children);
  (0, _devWarning["default"])(flattenArr.length > React.Children.count(children), 'HorizontalAnchor', "horizontal Anchor can't have nested children");
  return flattenArr.map(function (node) {
    if ( /*#__PURE__*/React.isValidElement(node)) {
      var key = node.props.href !== undefined ? String(node.props.href) : undefined;
      return {
        key: key,
        node: node,
        tab: node.props.title
      };
    }

    return null;
  }).filter(function (tab) {
    return tab;
  });
}

var animated = {
  inkBar: true,
  tabPane: false
};
var uuid = 0;

var HorizontalAnchor = function HorizontalAnchor(_ref) {
  var locale = _ref.locale,
      prefixCls = _ref.prefixCls,
      children = _ref.children;
  var configContext = React.useContext(_configProvider.ConfigContext);
  var anchorContext = React.useContext(_context["default"]);

  var _React$useState = React.useState(),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      id = _React$useState2[0],
      setId = _React$useState2[1];

  React.useEffect(function () {
    if (!id) {
      setId("rc-tabs-".concat(process.env.NODE_ENV === 'test' ? 'test' : uuid));
      uuid += 1;
    }
  }, []);
  var tabContextValue = React.useMemo(function () {
    return {
      tabs: parseTabList(children),
      prefixCls: configContext.getPrefixCls('tabs')
    };
  }, [children]);
  React.useEffect(function () {
    tabContextValue.tabs.forEach(function (tab) {
      return anchorContext.registerLink(tab.key);
    });
    return function () {
      tabContextValue.tabs.forEach(function (tab) {
        return anchorContext.unregisterLink(tab.key);
      });
    };
  }, [tabContextValue]);

  var handleTabClick = function handleTabClick(href, e) {
    var _a;

    var scrollTo = anchorContext.scrollTo,
        onClick = anchorContext.onClick; // find title by href

    var title = (_a = tabContextValue.tabs.find(function (tab) {
      return tab.key === href;
    })) === null || _a === void 0 ? void 0 : _a.tab;
    onClick === null || onClick === void 0 ? void 0 : onClick(e, {
      href: href,
      title: title
    });
    scrollTo(href);
  };

  var moreIcon = function moreIcon(dropdownVisible) {
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-more-icon")
    }, /*#__PURE__*/React.createElement("span", null, locale.all), /*#__PURE__*/React.createElement(_DownFilled["default"], {
      rotate: dropdownVisible ? 180 : 0
    }));
  };

  var dropdownItemRenderWrapper = function dropdownItemRenderWrapper(node) {
    return /*#__PURE__*/React.createElement(_typography["default"].Text, {
      className: "".concat(prefixCls, "-typography"),
      ellipsis: {
        tooltip: node
      }
    }, node);
  };

  return /*#__PURE__*/React.createElement(_TabContext["default"].Provider, {
    value: tabContextValue
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-horizontal")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(tabContextValue.prefixCls, " ").concat(tabContextValue.prefixCls, "-top")
  }, /*#__PURE__*/React.createElement(_TabNavList["default"], {
    id: id,
    activeKey: anchorContext.activeLink,
    tabPosition: "top",
    animated: animated,
    onTabClick: handleTabClick,
    rtl: configContext.direction === 'rtl',
    mobile: false,
    panes: children // panes isn't used in TabNavList, but is required props
    ,
    moreIcon: moreIcon,
    dropdownProps: {
      trigger: ['click'],
      overlayStyle: {
        width: '200px'
      }
    },
    boundaryOffset: 4,
    dropdownItemRenderWrapper: dropdownItemRenderWrapper,
    dropdownMode: "all"
  }, function (node) {
    var newChildren = React.Children.map(node.props.children, function (child) {
      if (child) {
        return /*#__PURE__*/React.cloneElement(child, {}, /*#__PURE__*/React.createElement(_typography["default"].Text, {
          className: "".concat(prefixCls, "-typography"),
          ellipsis: {
            tooltip: child.props.children
          }
        }, child.props.children));
      }
    });
    return React.cloneElement.apply(React, [node, {}].concat((0, _toConsumableArray2["default"])(newChildren)));
  }))));
};

var _default = HorizontalAnchor;
exports["default"] = _default;